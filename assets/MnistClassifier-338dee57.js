import{aG as ke,r as m,c as K,aH as Ie,d as Ut,a3 as ut,ak as Xt,aI as ae,o as b,a as M,b as t,t as l,ac as Nt,ag as Ht,a6 as te,R as At,g as V,S as ct,n as E,w as he,al as Jt,_ as Et,P as _t,Q as wt,J as Lt,K as ye,f as c,aw as ge,G as pe,a4 as Ae,F as be,e as gt,N as le,ap as me,O as oe,X as we,ad as Yt,ai as fe,ar as ze,ay as De,az as Ne,aa as Pe,aB as Fe,U as Gt,aC as We,T as $e,aD as Le,ah as Re}from"./index-4bff58bc.js";import{F as Qt}from"./FloatingPanel-08dc7355.js";import{mnistApiService as j}from"./mnistApiService-dcfd3c73.js";function ee(h,e,d){const n=h.weights;if(n.length!==e.length)throw new Error(`Dimension mismatch: neuron has ${n.length} weights, input has ${e.length} features`);switch(d){case"dotProduct":return Rt(n,e)+h.bias;case"euclidean":return-Zt(n,e)+h.bias;case"yatProduct":const i=Rt(n,e),u=Zt(n,e);return i/Math.sqrt(u*u+1e-8)+h.bias;case"cosine":return Ue(n,e)+h.bias;case"manhattan":return-Ee(n,e)+h.bias;case"rbf":return Math.exp(-.1*Zt(n,e)**2)+h.bias;default:throw new Error(`Unknown similarity metric: ${d}`)}}function Rt(h,e){return h.reduce((d,n,i)=>d+n*e[i],0)}function Zt(h,e){return Math.sqrt(h.reduce((d,n,i)=>d+(n-e[i])**2,0))}function Ue(h,e){const d=Rt(h,e),n=Math.sqrt(Rt(h,h)),i=Math.sqrt(Rt(e,e));return n===0||i===0?0:d/(n*i)}function Ee(h,e){return h.reduce((d,n,i)=>d+Math.abs(n-e[i]),0)}function se(h,e){if(e==="none"||h.length===0)return[...h];switch(e){case"softmax":return qe(h);case"softermax":const d=h.map(i=>1+i),n=d.reduce((i,u)=>i+u,0);return d.map(i=>i/n);case"sigmoid":return h.map(i=>1/(1+Math.exp(-i)));case"relu":return h.map(i=>Math.max(0,i));case"gelu":return h.map(i=>.5*i*(1+Math.tanh(Math.sqrt(2/Math.PI)*(i+.044715*Math.pow(i,3)))));default:throw new Error(`Unknown activation function: ${e}`)}}function qe(h){const e=Math.max(...h),d=h.map(i=>Math.exp(i-e)),n=d.reduce((i,u)=>i+u,0);return d.map(i=>i/n)}function _e(h,e,d,n){if(e.length===0)return{winningNeuron:null,scores:[],probabilities:[],confidence:0};const i=e.map(R=>ee(R,h,d)),u=se(i,n);let w=-1/0,C=null;u.forEach((R,T)=>{R>w&&(w=R,C=e[T])});const k=w/(u.reduce((R,T)=>R+T,0)||1);return{winningNeuron:C,scores:i,probabilities:u,confidence:k}}function Ce(h,e,d,n){if(e.length===0||h.length===0)return 0;let i=0;const u=h.length;for(const w of h){const C=e.map(_=>ee(_,w.features,d));let k;n==="none"?k=se(C,"softmax"):k=se(C,n);const R=k.reduce((_,N)=>_+N,0);R>0?k=k.map(_=>Math.max(_/R,1e-8)):k=k.map(()=>1/k.length);const T=e.findIndex(_=>_.id===w.label);if(T!==-1){const _=Math.max(k[T],1e-8);i+=-Math.log(_)}else i+=-Math.log(1e-8)}return i/u}function ie(h,e,d,n){if(e.length===0||h.length===0)return 0;let i=0;for(const u of h){const w=_e(u.features,e,d,n);w.winningNeuron&&w.winningNeuron.id===u.label&&i++}return i/h.length}function He(h,e,d,n,i){if(e.length===0)return{weights:new Array(h.weights.length).fill(0),bias:0};const u=new Array(h.weights.length).fill(0);let w=0;const C=e.length;for(const k of e){const R=d.map(O=>ee(O,k.features,n));let T;i==="none"?T=se(R,"softmax"):T=se(R,i);const _=T.reduce((O,Q)=>O+Q,0);_>0&&(T=T.map(O=>O/_));const N=d.findIndex(O=>O.id===k.label),P=d.findIndex(O=>O.id===h.id);if(N!==-1&&P!==-1){const O=N===P?1:0,H=T[P]-O,A=Ve(h,k.features,n);for(let $=0;$<u.length;$++)u[$]+=H*A.weights[$];w+=H*A.bias}}return{weights:u.map(k=>k/C),bias:w/C}}function Ve(h,e,d){const n=h.weights;switch(d){case"dotProduct":return{weights:[...e],bias:1};case"euclidean":const i=n.map((A,$)=>A-e[$]),u=Math.sqrt(i.reduce((A,$)=>A+$*$,0));return u===0?{weights:new Array(n.length).fill(0),bias:1}:{weights:i.map(A=>A/u),bias:1};case"yatProduct":const w=Rt(n,e),C=Zt(n,e),k=Math.sqrt(C*C+1e-8),R=e,T=n.map((A,$)=>(A-e[$])/(C+1e-8));return{weights:n.map((A,$)=>(R[$]*k-w*T[$]*C/k)/(k*k)),bias:1};case"cosine":const _=Math.sqrt(Rt(n,n)),N=Math.sqrt(Rt(e,e));if(_===0||N===0)return{weights:new Array(n.length).fill(0),bias:1};const P=Rt(n,e);return{weights:n.map((A,$)=>(e[$]*_-A*P/_)/(_*N)),bias:1};case"manhattan":return{weights:n.map((A,$)=>A>e[$]?-1:A<e[$]?1:0),bias:1};case"rbf":const O=.1,Q=Zt(n,e),H=Math.exp(-O*Q*Q);return{weights:n.map((A,$)=>-2*O*(A-e[$])*H),bias:1};default:throw new Error(`Unknown similarity metric: ${d}`)}}function Be(h,e){const d=[];for(let n=0;n<h.length;n+=e){const i=h.slice(n,n+e);d.push({features:i.map(u=>u.features),labels:i.map(u=>u.label),batchSize:Math.min(e,h.length-n)})}return d}function Oe(h,e="xavier"){switch(e){case"random":return Array.from({length:h},()=>(Math.random()-.5)*.1);case"xavier":const d=Math.sqrt(6/h);return Array.from({length:h},()=>(Math.random()-.5)*2*d);case"he":const n=Math.sqrt(2/h);return Array.from({length:h},()=>n*Math.sqrt(-2*Math.log(Math.random()))*Math.cos(2*Math.PI*Math.random()));case"zeros":return new Array(h).fill(0);default:throw new Error(`Unknown initialization strategy: ${e}`)}}function Ge(h){const e=Math.max(...h),d=Math.min(...h),n=e-d;return n===0?h.map(()=>0):h.map(i=>(i-d)/n)}function Qe(h,e=28,d=28){if(h.length!==e*d)throw new Error(`Weight vector length ${h.length} doesn't match image dimensions ${e}x${d}`);const n=[];for(let i=0;i<d;i++){const u=[];for(let w=0;w<e;w++)u.push(h[i*e+w]);n.push(u)}return n}class Je{dataset=null;isLoading=!1;async loadMNIST(e={train:1e3,test:200}){if(this.dataset&&this.dataset.trainImages.length>=e.train)return{trainImages:this.dataset.trainImages.slice(0,e.train),testImages:this.dataset.testImages.slice(0,e.test),imageShape:this.dataset.imageShape,numClasses:this.dataset.numClasses};if(this.isLoading)throw new Error("MNIST dataset is already loading");this.isLoading=!0;try{console.log("Generating high-quality MNIST-like dataset...");const d=await this.generateHighQualityMNIST(e);return this.dataset={trainImages:d.trainImages,testImages:d.testImages,imageShape:{width:28,height:28},numClasses:10},console.log(`MNIST dataset ready: ${this.dataset.trainImages.length} train, ${this.dataset.testImages.length} test samples`),this.dataset}catch(d){throw console.error("Failed to generate MNIST dataset:",d),d}finally{this.isLoading=!1}}async generateHighQualityMNIST(e){const d=await this.generateMNISTSamples(e.train,"train"),n=await this.generateMNISTSamples(e.test,"test");return{trainImages:d,testImages:n}}async generateMNISTSamples(e,d){const n=[],i=Math.ceil(e/10);console.log(d);for(let u=0;u<10;u++)for(let w=0;w<i&&n.length<e;w++){const C=this.generateRealisticDigit(u,w);n.push({features:Ge(C),label:u,originalLabel:u})}for(let u=n.length-1;u>0;u--){const w=Math.floor(Math.random()*(u+1));[n[u],n[w]]=[n[w],n[u]]}return n.slice(0,e)}generateRealisticDigit(e,d){const i=this.getDigitBasePattern(e,28);return this.applyRealisticTransformations(i,d,28)}getDigitBasePattern(e,d){const n=new Array(784).fill(0),i=(C,k,R)=>{if(C>=0&&C<d&&k>=0&&k<d){const T=Math.floor(k)*d+Math.floor(C);n[T]=Math.max(n[T],R)}},u=(C,k,R,T,_)=>{const N=Math.abs(R-C),P=Math.abs(T-k),O=C<R?1:-1,Q=k<T?1:-1;let H=N-P,A=C,$=k;for(;i(A,$,_),i(A+1,$,_*.7),i(A,$+1,_*.7),!(A===R&&$===T);){const x=2*H;x>-P&&(H-=P,A+=O),x<N&&(H+=N,$+=Q)}},w=(C,k,R,T,_=2)=>{for(let N=0;N<2*Math.PI;N+=.05)for(let P=R-_;P<=R+_;P++){const O=C+P*Math.cos(N),Q=k+P*Math.sin(N),H=Math.max(0,1-Math.abs(P-R)/_);i(O,Q,T*H)}};switch(e){case 0:w(14,14,9,.9,3);break;case 1:u(12,6,14,4,.8),u(14,4,14,22,.9),u(10,22,18,22,.8);break;case 2:u(6,8,20,8,.8),u(20,8,20,14,.8),u(20,14,6,22,.9),u(6,22,20,22,.8);break;case 3:u(6,6,18,6,.8),u(18,6,18,14,.8),u(10,14,18,14,.7),u(18,14,18,22,.8),u(6,22,18,22,.8);break;case 4:u(8,6,8,14,.9),u(8,14,20,14,.8),u(16,6,16,22,.9);break;case 5:u(6,6,18,6,.8),u(6,6,6,14,.8),u(6,14,16,14,.8),u(16,14,16,22,.8),u(6,22,16,22,.8);break;case 6:w(14,10,8,.8,2),w(14,17,6,.9,2),u(6,10,6,22,.8);break;case 7:u(6,6,20,6,.8),u(20,6,12,22,.9);break;case 8:w(14,10,6,.8,2),w(14,18,6,.8,2);break;case 9:w(14,11,6,.9,2),w(14,18,8,.8,2),u(20,11,20,22,.8);break}return n}applyRealisticTransformations(e,d,n){const i=[...e],u=.02+d%3*.01;for(let C=0;C<i.length;C++)i[C]>0&&(i[C]=Math.max(0,Math.min(1,i[C]+(Math.random()-.5)*u)));for(let C=0;C<5;C++){const k=Math.floor(Math.random()*i.length);i[k]=Math.min(.3,i[k]+Math.random()*.1)}const w=[...i];for(let C=1;C<n-1;C++)for(let k=1;k<n-1;k++){const R=C*n+k;if(i[R]>.1){const _=[i[(C-1)*n+k],i[(C+1)*n+k],i[C*n+(k-1)],i[C*n+(k+1)]].reduce((N,P)=>N+P,0)/4;w[R]=Math.min(1,i[R]+_*.1)}}return w}async getQuickSample(e=100){return this.generateMNISTSamples(e,"train")}getDatasetStats(){return this.dataset?{train:this.dataset.trainImages.length,test:this.dataset.testImages.length,features:this.dataset.trainImages[0]?.features.length||0,classes:this.dataset.numClasses}:null}sampleTrainBatch(e){if(!this.dataset)return[];const d=[...this.dataset.trainImages].sort(()=>Math.random()-.5);return d.slice(0,Math.min(e,d.length))}getTestData(){return this.dataset?.testImages||[]}getTrainData(){return this.dataset?.trainImages||[]}}const Me=new Je;class Xe{listeners=[];on(e){this.listeners.push(e)}off(e){this.listeners=this.listeners.filter(d=>d!==e)}emit(){console.log("🎆 Emitting visualization update event to",this.listeners.length,"listeners"),this.listeners.forEach(e=>e())}}const Bt=new Xe,Vt=ke("mnistClassifier",()=>{const h=m([]),e=m([]),d=m([]),n=m([]),i=m([0,1,2,3,4,5,6,7,8,9]),u=m([0,1,2,3,4,5,6,7,8,9]),w=m("dotProduct"),C=m("softmax"),k=m("weights"),R=m(null),T=m(!0),_=m(!1),N=m({trainSize:0,testSize:0,numFeatures:784,numClasses:10}),P=m({steps:[],isRunning:!1,currentStep:0,totalSteps:0,config:{learningRate:.01,epochs:100,batchSize:32,speed:1,regularization:{l1:0,l2:.001}}}),O=m(0),Q=m(0),H=m(0),A=m(0),$=m(null),x=m(!0),q=m(!0),tt=m(.7),it=m(null),at=K(()=>e.value.filter(s=>i.value.includes(s.label))),dt=K(()=>d.value.filter(s=>i.value.includes(s.label))),ot=K(()=>h.value.length===0||at.value.length===0?0:T.value&&_.value?Q.value:ie(at.value,h.value,w.value,C.value)*100),Tt=K(()=>h.value.length===0||dt.value.length===0?0:T.value&&_.value?H.value:ie(dt.value,h.value,w.value,C.value)*100),ht=K(()=>{const s=P.value.steps;return s.length===0?Pt(at.value):s[s.length-1].loss}),lt=K(()=>P.value.isRunning),vt=m("mnist"),$t=m({});function Pt(s){return Ce(s,h.value,w.value,C.value)}async function kt(s){if(T.value&&_.value&&s.length>0)try{const{weights:a,biases:r}=j.extractNetworkParams(h.value),{features:f,labels:F}=j.extractBatchData(s);return(await j.computeGradients(a,r,f,F,w.value,C.value)).loss}catch(a){console.warn("API loss computation failed, falling back to local:",a)}return Ce(s,h.value,w.value,C.value)}async function xt(){try{console.log("🔌 Checking API connection..."),_.value=await j.checkConnection(),_.value?(console.log("✅ API connected successfully!"),console.log(`🌐 API URL: ${j.apiUrl}`),await Ct(),x.value&&st()):(console.warn("⚠️ API not available, falling back to local computation"),T.value=!1,await Ct())}catch(s){console.error("❌ Failed to connect to API:",s),_.value=!1,T.value=!1,await Ct()}}async function B(s="xavier"){console.log("Initializing MNIST classifier with 10 neurons..."),await xt(),h.value=[];for(let a=0;a<10;a++){const r=Oe(N.value.numFeatures,s),f={id:a,weights:r,bias:0,color:Ie(a),label:`Digit ${a}`};h.value.push(f)}console.log(`Initialized ${h.value.length} neurons with ${s} strategy`),_.value?console.log("🚀 Using JAX API for high-performance computation"):console.log("⚠️ Using local computation"),R.value=h.value[0]}async function yt(s={train:1e3,test:200}){try{if(console.log(`Loading ${vt.value} dataset...`),!_.value){console.warn("API not connected, falling back to synthetic data");const U=await Me.loadMNIST(s);e.value=U.trainImages,d.value=U.testImages,N.value={trainSize:U.trainImages.length,testSize:U.testImages.length,numFeatures:U.trainImages[0]?.features.length||784,numClasses:U.numClasses},console.log("Synthetic dataset loaded successfully:",N.value),h.value.length===0&&await B();return}console.log("Loading real dataset from API...");const a=await j.loadDataset(vt.value,"train",s.train),r=await j.loadDataset(vt.value,"test",s.test);console.log("Dataset metadata loaded:",{trainInfo:a,testInfo:r});const f=await j.getDatasetSample(vt.value,"train",0,s.train),F=await j.getDatasetSample(vt.value,"test",0,s.test);console.log("Dataset samples loaded:",{trainSamples:f.features.length,testSamples:F.features.length}),e.value=f.features.map((U,J)=>({features:U,label:f.labels[J],originalLabel:f.labels[J]})),d.value=F.features.map((U,J)=>({features:U,label:F.labels[J],originalLabel:F.labels[J]})),N.value={trainSize:e.value.length,testSize:d.value.length,numFeatures:a.feature_shape[1],numClasses:a.num_classes},u.value=Array.from({length:a.num_classes},(U,J)=>J),i.value=[...u.value],console.log("Real dataset loaded successfully:",N.value),console.log("Available classes:",a.class_names),h.value.length===0&&await B()}catch(a){console.error("Failed to load dataset:",a),console.warn("Falling back to synthetic dataset generation...");try{const r=await Me.loadMNIST(s);e.value=r.trainImages,d.value=r.testImages,N.value={trainSize:r.trainImages.length,testSize:r.testImages.length,numFeatures:r.trainImages[0]?.features.length||784,numClasses:r.numClasses},console.log("Fallback synthetic dataset loaded:",N.value),h.value.length===0&&await B()}catch(r){throw console.error("Even fallback dataset loading failed:",r),r}}}async function Ct(){try{_.value?($t.value=await j.getAvailableDatasets(),console.log("Available datasets:",$t.value)):$t.value={synthetic_mnist:{classes:[0,1,2,3,4,5,6,7,8,9],class_names:["0","1","2","3","4","5","6","7","8","9"],description:"Synthetic MNIST-like dataset (local generation)"}}}catch(s){console.error("Failed to load available datasets:",s),$t.value={}}}function zt(s){vt.value=s,console.log(`Selected dataset changed to: ${s}`)}async function Mt(s=32){try{if(_.value&&e.value.length===0){const a=await j.getTrainingBatch(vt.value,"train",s,i.value.length<u.value.length?i.value:void 0);return a.features.map((r,f)=>({features:r,label:a.labels[f],originalLabel:a.labels[f]}))}else{const a=at.value;if(a.length===0)return[];const r=[];for(let f=0;f<s&&f<a.length;f++){const F=Math.floor(Math.random()*a.length);r.push(a[F])}return r}}catch(a){console.warn("Failed to get training batch from API, using local data:",a);const r=at.value;if(r.length===0)return[];const f=[];for(let F=0;F<s&&F<r.length;F++){const U=Math.floor(Math.random()*r.length);f.push(r[U])}return f}}function D(s){i.value.includes(s)?i.value=i.value.filter(a=>a!==s):i.value=[...i.value,s]}async function L(s){if(T.value&&_.value)try{const{weights:r,biases:f}=j.extractNetworkParams(h.value);return(await j.forwardPass(r,f,s,w.value,C.value)).predicted_class}catch(r){console.warn("API prediction failed, falling back to local:",r)}return _e(s,h.value,w.value,C.value).winningNeuron?.id??null}function rt(s){return _e(s,h.value,w.value,C.value).winningNeuron?.id??null}async function St(){if(T.value&&_.value)try{const{weights:s,biases:a}=j.extractNetworkParams(h.value);if(at.value.length>0){const{features:r,labels:f}=j.extractBatchData(at.value),F=await j.computeAccuracy(s,a,r,f,w.value,C.value);Q.value=F*100}if(dt.value.length>0){const{features:r,labels:f}=j.extractBatchData(dt.value),F=await j.computeAccuracy(s,a,r,f,w.value,C.value);H.value=F*100}}catch(s){console.warn("Failed to update accuracy metrics via API:",s)}}async function I(){if(console.log("🎯 Starting training"),console.log(`🔧 Training mode: ${T.value&&_.value?"API (JAX)":"Local (JS)"}`),h.value.length===0||at.value.length===0&&(!_.value||!T.value)){console.warn("Cannot start training: no neurons or training data");return}const s=P.value.config;console.log("Starting training with config:",s),P.value={steps:[],isRunning:!0,currentStep:0,totalSteps:s.epochs,config:s};try{T.value&&_.value?(console.log("🚀 Using API-based training with dynamic batch loading"),await g(s)):(console.log("💻 Using local training with pre-loaded batches"),await v(s)),await St()}catch(a){throw console.error("❌ Training failed:",a),a}finally{P.value.isRunning=!1,n.value=[],console.log("Training completed")}}async function g(s){console.log("🔧 API Training Mode - Dynamic batch loading");for(let a=1;a<=s.epochs&&P.value.isRunning;a++){console.log(`📊 API Epoch ${a}/${s.epochs}`),P.value.currentStep=a;const r=Math.max(at.value.length,1e3),f=Math.ceil(r/s.batchSize);console.log(`Processing ${f} batches for epoch ${a}`);for(let U=0;U<f&&P.value.isRunning;U++)try{const J=await Mt(s.batchSize);if(J.length===0){console.warn("Empty batch received, skipping...");continue}n.value=J,console.log(`🔄 Processing batch ${U+1}/${f} (${J.length} samples)`),await z(J,s.learningRate);const Z=await kt(J),mt=ie(J,h.value,w.value,C.value)*100;P.value.steps.push({step:P.value.steps.length,loss:Z,accuracy:mt,trainAccuracy:mt,testAccuracy:0,timestamp:Date.now(),neurons:h.value.map(X=>({id:X.id,weights:[...X.weights],bias:X.bias})),learningMetrics:{convergence:Math.abs(Z-(P.value.steps[P.value.steps.length-1]?.loss||Z)),weightDiversity:p(),activationSparsity:0}}),h.value=h.value.map(X=>({...X,weights:[...X.weights]})),O.value++,console.log(`✅ API Batch processed - Loss: ${Z.toFixed(4)}, Accuracy: ${mt.toFixed(1)}%`);const Wt=Math.max(10,100/s.speed);await new Promise(X=>setTimeout(X,Wt))}catch(J){console.error(`❌ Failed to process batch ${U+1}:`,J)}const F=Math.max(50,500/s.speed);await new Promise(U=>setTimeout(U,F))}}async function v(s){console.log("💻 Local Training Mode - Pre-loaded batches");const a=Be(at.value,s.batchSize);console.log(`Created ${a.length} training batches`);for(let r=1;r<=s.epochs&&P.value.isRunning;r++){console.log(`📊 Local Epoch ${r}/${s.epochs}`),P.value.currentStep=r;const f=[...a].sort(()=>Math.random()-.5);for(const U of f){if(!P.value.isRunning)break;const J=U.features.map((X,Ft)=>({features:X,label:U.labels[Ft]}));n.value=J;try{await z(J,s.learningRate)}catch(X){throw console.error("❌ Batch update failed:",X),X}const Z=Pt(J),mt=ie(J,h.value,w.value,C.value)*100;P.value.steps.push({step:P.value.steps.length,loss:Z,accuracy:mt,trainAccuracy:mt,testAccuracy:0,timestamp:Date.now(),neurons:h.value.map(X=>({id:X.id,weights:[...X.weights],bias:X.bias})),learningMetrics:{convergence:Math.abs(Z-(P.value.steps[P.value.steps.length-1]?.loss||Z)),weightDiversity:p(),activationSparsity:0}}),h.value=h.value.map(X=>({...X,weights:[...X.weights]})),O.value++,console.log(`✅ Local Batch processed - Loss: ${Z.toFixed(4)}, Accuracy: ${mt.toFixed(1)}%`);const Wt=Math.max(10,100/s.speed);await new Promise(X=>setTimeout(X,Wt))}const F=Math.max(50,500/s.speed);await new Promise(U=>setTimeout(U,F))}}function p(){if(h.value.length===0)return 0;const s=h.value.map(f=>Math.sqrt(f.weights.reduce((F,U)=>F+U*U,0))),a=s.reduce((f,F)=>f+F,0)/s.length,r=s.reduce((f,F)=>f+(F-a)**2,0)/s.length;return Math.sqrt(r)}async function z(s,a){if(T.value&&_.value)try{const{weights:f,biases:F}=j.extractNetworkParams(h.value),{features:U,labels:J}=j.extractBatchData(s);console.log("🔧 API Training Step - Input:",{weightsShape:f.map(mt=>mt.length),biasesLength:F.length,featuresShape:U.map(mt=>mt.length),labelsLength:J.length});const Z=await j.trainStep(f,F,U,J,w.value,C.value,a);console.log("🔧 API Training Step - Result:",{newWeightsShape:Z.new_weights.map(mt=>mt.length),newBiasesLength:Z.new_biases.length,resultKeys:Object.keys(Z)}),h.value=h.value.map((mt,Wt)=>({...mt,weights:[...Z.new_weights[Wt]],bias:Z.new_biases[Wt]})),O.value++,setTimeout(()=>{Bt.emit()},0);return}catch(f){console.warn("API training step failed, falling back to local:",f)}const r=h.value.map(f=>He(f,s,h.value,w.value,C.value));h.value.forEach((f,F)=>{const U=r[F];f.weights=f.weights.map((J,Z)=>J-a*U.weights[Z]),f.bias-=a*U.bias}),h.value=h.value.map(f=>({...f,weights:[...f.weights],bias:f.bias})),O.value++,setTimeout(()=>{Bt.emit()},0)}function S(){P.value.isRunning=!1,n.value=[]}function o(){P.value.isRunning=!1,console.log("Training paused by user")}function y(){P.value.isRunning=!0,console.log("Training resumed by user")}function W(){P.value.steps=[],P.value.currentStep=0,n.value=[]}function G(s){s.learningRate!==void 0&&(P.value.config.learningRate=s.learningRate),s.epochs!==void 0&&(P.value.config.epochs=s.epochs),s.batchSize!==void 0&&(P.value.config.batchSize=s.batchSize),s.speed!==void 0&&(P.value.config.speed=s.speed),s.regularization&&(P.value.config.regularization={...P.value.config.regularization,...s.regularization})}function et(){h.value=[],e.value=[],d.value=[],n.value=[],R.value=null,i.value=[0,1,2,3,4,5,6,7,8,9],w.value="dotProduct",C.value="softmax",k.value="weights",W(),N.value={trainSize:0,testSize:0,numFeatures:784,numClasses:10}}async function ft(s=50){try{console.log(`Loading quick test with ${s} samples...`),await yt({train:s,test:Math.floor(s*.2)}),h.value.length===0&&await B(),console.log(`Quick test setup completed with ${s} samples`)}catch(a){throw console.error("Quick test failed:",a),a}}async function Y(){if(!(!_.value||!T.value))try{const s=await j.getModelWeights();if(s.weights.length===h.value.length){for(let a=0;a<h.value.length;a++)s.weights[a]&&s.weights[a].length===h.value[a].weights.length&&(h.value[a].weights=[...s.weights[a]],h.value[a].bias=s.biases[a]||h.value[a].bias);A.value=Date.now(),O.value++,Bt.emit(),console.log("🔄 Weights synced from API:",{neuronsUpdated:h.value.length,timestamp:new Date(A.value).toISOString()})}}catch(s){console.warn("⚠️ Failed to sync weights from API:",s)}}async function bt(){if(!(!_.value||!T.value||h.value.length===0))try{const{weights:s,biases:a}=j.extractNetworkParams(h.value);await j.updateModelWeights(s,a),A.value=Date.now(),console.log("📤 Weights synced to API:",{neuronsUpdated:h.value.length,timestamp:new Date(A.value).toISOString()})}catch(s){console.warn("⚠️ Failed to sync weights to API:",s)}}function st(){$.value&&clearInterval($.value);const s=lt.value?2e3:1e4;$.value=setInterval(async()=>{_.value&&x.value&&await Y()},s),console.log("🔄 Started weight synchronization:",{interval:s})}function nt(){$.value&&(clearInterval($.value),$.value=null,console.log("⏹️ Stopped weight synchronization"))}async function pt(){console.log("🔄 Force syncing weights..."),await Y()}async function Dt(s){if(!_.value||!T.value)return null;try{return await j.getModelActivations(s,void 0,void 0,w.value,C.value)}catch(a){return console.warn("⚠️ Failed to get activations from API:",a),null}}async function jt(s,a="diverging"){if(!_.value||!T.value)return null;try{return await j.getWeightVisualization(s,a)}catch(r){return console.warn("⚠️ Failed to get weight visualization from API:",r),null}}async function re(s=10,a=784,r=tt.value){try{if(_.value){console.log("🔧 Initializing ternary weights via API...");const f=await j.initializeTernaryModel(s,a,r);h.value=f.weights.map((F,U)=>({id:U,weights:F,bias:f.biases[U],color:`hsl(${U*36%360}, 70%, 50%)`})),q.value=f.model_info.use_ternary_weights,tt.value=f.model_info.sparsity_ratio,console.log("✅ Ternary weights initialized:",f.weight_distribution),await Kt()}else console.log("🔧 Initializing ternary weights locally..."),h.value=Array.from({length:s},(f,F)=>({id:F,weights:Array.from({length:a},()=>{const U=Math.random();return U<r?0:U>.5+r/2?1:-1}),bias:(Math.random()-.5)*.1,color:`hsl(${F*36%360}, 70%, 50%)`})),console.log("✅ Local ternary weights initialized");Bt.emit()}catch(f){throw console.error("❌ Failed to initialize ternary weights:",f),f}}async function Ot(){try{if(!_.value){console.warn("⚠️ API not connected, cannot quantize weights");return}console.log("🔧 Quantizing weights to ternary...");const s=await j.quantizeWeights();h.value=s.quantized_weights.map((a,r)=>({...h.value[r],weights:a})),console.log("✅ Weights quantized to ternary:",s.quantized_distribution),await Kt(),Bt.emit()}catch(s){throw console.error("❌ Failed to quantize weights:",s),s}}async function Kt(){try{if(!_.value){console.warn("⚠️ API not connected, cannot get ternary stats");return}const s=await j.getTernaryStats();it.value=s,console.log("📊 Ternary stats updated:",{is_ternary:s.is_ternary,unique_values:s.unique_values,distribution:s.overall_distribution})}catch(s){console.warn("⚠️ Failed to refresh ternary stats:",s),it.value=null}}function It(s){tt.value=Math.max(0,Math.min(1,s)),console.log("🔧 Ternary sparsity ratio set to:",tt.value)}function ce(){q.value=!q.value,console.log("🔧 Ternary weights",q.value?"enabled":"disabled"),_.value&&j.toggleTernaryWeights(q.value).then(s=>{console.log("✅ API ternary weights updated:",s.message)}).catch(s=>{console.warn("⚠️ Failed to sync ternary weights with API:",s)})}return{neurons:h,trainData:e,testData:d,currentBatch:n,activeClasses:i,allClasses:u,selectedDataset:vt,availableDatasets:$t,similarityMetric:w,activationFunction:C,visualizationMode:k,selectedNeuron:R,datasetInfo:N,optimizationHistory:P,visualizationUpdateTrigger:O,useApiCompute:T,apiConnected:_,filteredTrainData:at,filteredTestData:dt,trainAccuracy:ot,testAccuracy:Tt,currentLoss:ht,isTraining:lt,lastWeightUpdate:A,weightUpdateInterval:$,autoSyncWeights:x,useTernaryWeights:q,ternarySparsityRatio:tt,ternaryStats:it,initializeApiConnection:xt,initializeClassifier:B,loadDataset:yt,toggleClass:D,getPrediction:L,getPredictionSync:rt,updateAccuracyMetrics:St,runTraining:I,stopTraining:S,pauseTraining:o,resumeTraining:y,clearHistory:W,updateOptimizationConfig:G,reset:et,quickTest:ft,loadAvailableDatasets:Ct,setSelectedDataset:zt,getTrainingBatch:Mt,syncWeightsFromApi:Y,syncWeightsToApi:bt,startWeightSync:st,stopWeightSync:nt,forceWeightSync:pt,getActivationsForVisualization:Dt,getWeightVisualizationData:jt,initializeTernaryWeights:re,quantizeWeightsToTernary:Ot,refreshTernaryStats:Kt,setTernarySparsity:It,toggleTernaryWeights:ce}}),je={class:"modal-header"},Ke={class:"header-info"},Ye={class:"header-stats"},Ze={class:"class-id"},ts={class:"weight-norm"},es={class:"header-controls"},ss={class:"zoom-controls"},as=["disabled"],ns={class:"zoom-level"},is=["disabled"],os={class:"colormap-selector"},ls={class:"modal-body"},rs={class:"visualization-container"},cs={class:"main-canvas-container"},us={class:"tooltip-content"},ds={class:"pixel-coords"},vs={class:"pixel-value"},hs={class:"pixel-normalized"},gs={class:"canvas-controls"},ps={class:"side-panel"},ms={class:"stats-section"},fs={class:"stats-grid"},_s={class:"stat-item"},ys={class:"stat-value"},bs={class:"stat-item"},ws={class:"stat-value"},$s={class:"stat-item"},Cs={class:"stat-value"},Ms={class:"stat-item"},Ss={class:"stat-value"},Ts={class:"stat-item"},xs={class:"stat-value"},ks={class:"stat-item"},Is={class:"stat-value"},As={class:"histogram-section"},zs={class:"histogram-stats"},Ds={class:"hist-stat"},Ns={class:"hist-value"},Ps={class:"hist-stat"},Fs={class:"hist-value"},Ws={class:"legend-section"},Ls={class:"colormap-legend"},Rs={class:"legend-labels"},Us={class:"legend-min"},Es={class:"legend-max"},qs={class:"modal-footer"},Hs={class:"footer-info"},Vs={class:"pixel-count"},Bs={key:0,class:"update-time"},Os={class:"footer-actions"},Gs=["disabled"],ve=420,Qs=Ut({__name:"WeightVisualizationModal",props:{neuron:{},isVisible:{type:Boolean},colormap:{default:"diverging"}},emits:["close","update-neuron"],setup(h,{emit:e}){const d=h,n=e,i=m(),u=m(),w=m(d.colormap),C=m(1),k=m(!1),R=m(!1),T=m(null),_=ve/28,N=m(!1),P=m({x:0,y:0}),O=m({x:0,y:0}),Q=m(null),H=m([...d.neuron.weights]),A=v=>["0","1","2","3","4","5","6","7","8","9"][v]||`Class ${v}`,$=v=>Math.sqrt(v.weights.reduce((p,z)=>p+z*z,0)),x=v=>v.weights.reduce((p,z)=>p+z,0)/v.weights.length,q=v=>{const p=x(v),z=v.weights.reduce((S,o)=>S+Math.pow(o-p,2),0)/v.weights.length;return Math.sqrt(z)};function tt(v){const p=v.reduce((o,y)=>o+y,0)/v.length,z=Math.sqrt(v.reduce((o,y)=>o+Math.pow(y-p,2),0)/v.length);return v.reduce((o,y)=>o+Math.pow((y-p)/z,3),0)/v.length}function it(v){const p=v.reduce((o,y)=>o+y,0)/v.length,z=Math.sqrt(v.reduce((o,y)=>o+Math.pow(y-p,2),0)/v.length);return v.reduce((o,y)=>o+Math.pow((y-p)/z,4),0)/v.length-3}function at(){dt()}function dt(){n("close")}function ot(){C.value=Math.min(8,C.value*1.5)}function Tt(){C.value=Math.max(1,C.value/1.5)}function ht(){C.value=1,O.value={x:0,y:0}}function lt(){k.value=!k.value,D()}function vt(v){v.preventDefault(),v.deltaY<0?ot():Tt()}function $t(v){N.value=!0,P.value={x:v.clientX,y:v.clientY}}function Pt(v){if(N.value){const p=v.clientX-P.value.x,z=v.clientY-P.value.y;O.value={x:p,y:z}}xt(v)}function kt(){N.value=!1}function xt(v){if(!i.value)return;const p=i.value.getBoundingClientRect(),z=(v.clientX-p.left)/C.value,S=(v.clientY-p.top)/C.value,o=Math.floor(z/_),y=Math.floor(S/_);if(y>=0&&y<28&&o>=0&&o<28){const W=y*28+o,G=H.value[W],et=Math.min(...H.value),ft=Math.max(...H.value),Y=(G-et)/(ft-et);Q.value={x:v.clientX-p.left+10,y:v.clientY-p.top-10,row:y,col:o,value:G,normalized:Y}}else Q.value=null}function B(){H.value=new Array(784).fill(0),R.value=!0,D()}function yt(){H.value=Array.from({length:784},()=>(Math.random()-.5)*.5),R.value=!0,D()}function Ct(){const v=Math.sqrt(H.value.reduce((p,z)=>p+z*z,0));v>0&&(H.value=H.value.map(p=>p/v),R.value=!0,D())}function zt(){const v={...d.neuron,weights:[...H.value]};n("update-neuron",v),R.value=!1,T.value=Date.now()}function Mt(){if(!i.value)return;const v=document.createElement("a");v.download=`class_${d.neuron.id}_weights.png`,v.href=i.value.toDataURL(),v.click()}function D(){Jt(()=>{L(),rt()})}function L(){if(!i.value)return;const v=i.value,p=v.getContext("2d");if(!p)return;p.clearRect(0,0,v.width,v.height);const z=H.value,S=Math.min(...z),y=Math.max(...z)-S||.001;for(let W=0;W<28;W++)for(let G=0;G<28;G++){const et=W*28+G,Y=(z[et]-S)/y,bt=G*_,st=W*_;p.fillStyle=St(Y,w.value),p.fillRect(bt,st,_,_)}if(k.value){p.strokeStyle="rgba(255, 255, 255, 0.3)",p.lineWidth=.5;for(let W=0;W<=28;W++)p.beginPath(),p.moveTo(W*_,0),p.lineTo(W*_,v.height),p.stroke(),p.beginPath(),p.moveTo(0,W*_),p.lineTo(v.width,W*_),p.stroke()}}function rt(){if(!u.value)return;const v=u.value,p=v.getContext("2d");if(!p)return;p.clearRect(0,0,v.width,v.height);const z=H.value,S=Math.min(...z),y=Math.max(...z)-S||.001,W=50,G=new Array(W).fill(0);z.forEach(bt=>{const st=Math.floor((bt-S)/y*(W-1));G[Math.max(0,Math.min(W-1,st))]++});const et=Math.max(...G),ft=v.width/W,Y=v.height-20;p.fillStyle="rgba(59, 130, 246, 0.7)",G.forEach((bt,st)=>{const nt=bt/et*Y,pt=st*ft,Dt=v.height-nt-10;p.fillRect(pt,Dt,ft-1,nt)}),p.strokeStyle="rgba(156, 163, 175, 1)",p.lineWidth=1,p.beginPath(),p.moveTo(0,v.height-10),p.lineTo(v.width,v.height-10),p.stroke()}function St(v,p){const z=Math.max(0,Math.min(1,v));switch(p){case"diverging":if(z<.5){const Y=z*2;return`rgb(${Math.floor(255*(1-Y))}, ${Math.floor(255*(1-Y))}, 255)`}else{const Y=(z-.5)*2;return`rgb(255, ${Math.floor(255*(1-Y))}, ${Math.floor(255*(1-Y))})`}case"viridis":const S=Math.floor(255*(.267+.004*z)),o=Math.floor(255*(.005+.803*z)),y=Math.floor(255*(.334+.659*z));return`rgb(${S}, ${o}, ${y})`;case"plasma":const W=Math.floor(255*(.05+.95*z)),G=Math.floor(255*(.03+.57*z)),et=Math.floor(255*(.53+.47*z));return`rgb(${W}, ${G}, ${et})`;case"grayscale":const ft=Math.floor(255*z);return`rgb(${ft}, ${ft}, ${ft})`;case"hot":if(z<.33){const Y=z/.33;return`rgb(${Math.floor(255*Y)}, 0, 0)`}else if(z<.66){const Y=(z-.33)/.33;return`rgb(255, ${Math.floor(255*Y)}, 0)`}else{const Y=(z-.66)/.34;return`rgb(255, 255, ${Math.floor(255*Y)})`}default:return`rgb(${Math.floor(255*z)}, ${Math.floor(255*z)}, ${Math.floor(255*z)})`}}function I(v){const z=Date.now()-v;return z<1e3?"now":z<6e4?`${Math.floor(z/1e3)}s ago`:z<36e5?`${Math.floor(z/6e4)}m ago`:`${Math.floor(z/36e5)}h ago`}ut(()=>d.isVisible,v=>{v&&(H.value=[...d.neuron.weights],R.value=!1,Jt(()=>{D()}))}),ut(()=>d.neuron.weights,v=>{R.value||(H.value=[...v],D())},{deep:!0});function g(v){if(d.isVisible)switch(v.key){case"Escape":dt();break;case"+":case"=":ot();break;case"-":Tt();break;case"0":ht();break;case"g":lt();break}}return Xt(()=>{document.addEventListener("keydown",g),D()}),ae(()=>{document.removeEventListener("keydown",g)}),(v,p)=>v.isVisible?(b(),M("div",{key:0,class:"weight-visualization-modal",onClick:at},[t("div",{class:"modal-content",onClick:p[1]||(p[1]=he(()=>{},["stop"]))},[t("div",je,[t("div",Ke,[t("h2",null,l(A(v.neuron.id))+" Weight Visualization",1),t("div",Ye,[t("span",Ze,"Class "+l(v.neuron.id),1),t("span",ts,"‖w‖: "+l($(v.neuron).toFixed(4)),1)])]),t("div",es,[t("div",ss,[t("button",{onClick:Tt,disabled:C.value<=1,class:"zoom-btn"},p[2]||(p[2]=[t("span",{class:"zoom-icon"},"🔍-",-1)]),8,as),t("span",ns,l(C.value.toFixed(1))+"x",1),t("button",{onClick:ot,disabled:C.value>=8,class:"zoom-btn"},p[3]||(p[3]=[t("span",{class:"zoom-icon"},"🔍+",-1)]),8,is)]),t("div",os,[p[5]||(p[5]=t("label",null,"Colormap:",-1)),Nt(t("select",{"onUpdate:modelValue":p[0]||(p[0]=z=>w.value=z),onChange:D},p[4]||(p[4]=[te('<option value="diverging" data-v-be401aa3>Diverging</option><option value="viridis" data-v-be401aa3>Viridis</option><option value="plasma" data-v-be401aa3>Plasma</option><option value="grayscale" data-v-be401aa3>Grayscale</option><option value="hot" data-v-be401aa3>Hot</option>',5)]),544),[[Ht,w.value]])]),t("button",{onClick:dt,class:"close-btn"},p[6]||(p[6]=[t("span",{class:"close-icon"},"✕",-1)]))])]),t("div",ls,[t("div",rs,[t("div",cs,[t("div",{class:"canvas-wrapper",style:At({transform:`scale(${C.value})`})},[t("canvas",{ref_key:"mainCanvas",ref:i,class:"weight-canvas-main",width:ve,height:ve,onWheel:vt,onMousedown:$t,onMousemove:Pt,onMouseup:kt,onMouseleave:kt},null,544),Q.value?(b(),M("div",{key:0,class:"pixel-tooltip",style:At({left:Q.value.x+"px",top:Q.value.y+"px"})},[t("div",us,[t("div",ds,"Pixel ("+l(Q.value.row)+", "+l(Q.value.col)+")",1),t("div",vs,"Value: "+l(Q.value.value.toFixed(4)),1),t("div",hs,"Norm: "+l(Q.value.normalized.toFixed(3)),1)])],4)):V("",!0)],4),t("div",gs,[t("button",{onClick:ht,class:"control-btn"},p[7]||(p[7]=[t("span",{class:"control-icon"},"🎯",-1),ct(" Reset View ")])),t("button",{onClick:lt,class:E(["control-btn",{active:k.value}])},p[8]||(p[8]=[t("span",{class:"control-icon"},"⊞",-1),ct(" Grid ")]),2),t("button",{onClick:Mt,class:"control-btn"},p[9]||(p[9]=[t("span",{class:"control-icon"},"💾",-1),ct(" Export ")]))])]),t("div",ps,[t("div",ms,[p[16]||(p[16]=t("h3",null,"Weight Statistics",-1)),t("div",fs,[t("div",_s,[p[10]||(p[10]=t("span",{class:"stat-label"},"Mean (μ):",-1)),t("span",ys,l(x(v.neuron).toFixed(4)),1)]),t("div",bs,[p[11]||(p[11]=t("span",{class:"stat-label"},"Std Dev (σ):",-1)),t("span",ws,l(q(v.neuron).toFixed(4)),1)]),t("div",$s,[p[12]||(p[12]=t("span",{class:"stat-label"},"Min:",-1)),t("span",Cs,l(Math.min(...v.neuron.weights).toFixed(4)),1)]),t("div",Ms,[p[13]||(p[13]=t("span",{class:"stat-label"},"Max:",-1)),t("span",Ss,l(Math.max(...v.neuron.weights).toFixed(4)),1)]),t("div",Ts,[p[14]||(p[14]=t("span",{class:"stat-label"},"Range:",-1)),t("span",xs,l((Math.max(...v.neuron.weights)-Math.min(...v.neuron.weights)).toFixed(4)),1)]),t("div",ks,[p[15]||(p[15]=t("span",{class:"stat-label"},"L2 Norm:",-1)),t("span",Is,l($(v.neuron).toFixed(4)),1)])])]),t("div",As,[p[19]||(p[19]=t("h3",null,"Weight Distribution",-1)),t("canvas",{ref_key:"histogramCanvas",ref:u,class:"histogram-canvas",width:"280",height:"160"},null,512),t("div",zs,[t("div",Ds,[p[17]||(p[17]=t("span",{class:"hist-label"},"Skewness:",-1)),t("span",Ns,l(tt(v.neuron.weights).toFixed(3)),1)]),t("div",Ps,[p[18]||(p[18]=t("span",{class:"hist-label"},"Kurtosis:",-1)),t("span",Fs,l(it(v.neuron.weights).toFixed(3)),1)])])]),t("div",Ws,[p[20]||(p[20]=t("h3",null,"Color Scale",-1)),t("div",Ls,[t("div",{class:E(["legend-gradient",`${w.value}-gradient`])},null,2),t("div",Rs,[t("span",Us,l(Math.min(...v.neuron.weights).toFixed(3)),1),t("span",Es,l(Math.max(...v.neuron.weights).toFixed(3)),1)])])]),t("div",{class:"actions-section"},[p[24]||(p[24]=t("h3",null,"Actions",-1)),t("div",{class:"action-buttons"},[t("button",{onClick:B,class:"action-btn reset"},p[21]||(p[21]=[t("span",{class:"action-icon"},"🔄",-1),ct(" Reset Weights ")])),t("button",{onClick:yt,class:"action-btn randomize"},p[22]||(p[22]=[t("span",{class:"action-icon"},"🎲",-1),ct(" Randomize ")])),t("button",{onClick:Ct,class:"action-btn normalize"},p[23]||(p[23]=[t("span",{class:"action-icon"},"⚖️",-1),ct(" Normalize ")]))])])])])]),t("div",qs,[t("div",Hs,[t("span",Vs,l(v.neuron.weights.length)+" weights (28×28)",1),T.value?(b(),M("span",Bs,"Updated "+l(I(T.value)),1)):V("",!0)]),t("div",Os,[t("button",{onClick:dt,class:"footer-btn secondary"},"Close"),t("button",{onClick:zt,class:"footer-btn primary",disabled:!R.value}," Apply Changes ",8,Gs)])])])])):V("",!0)}});const Js=Et(Qs,[["__scopeId","data-v-be401aa3"]]),Xs={class:"mnist-visualization"},js={class:"visualization-header"},Ks={class:"header-section"},Ys={class:"mode-selector"},Zs=["onClick","title"],ta={class:"sync-controls"},ea={class:"status-text"},sa={key:0,class:"sync-time"},aa=["disabled"],na={class:"auto-icon"},ia={class:"header-section"},oa={class:"control-group"},la=["value"],ra={key:0,class:"control-group"},ca={class:"control-group"},ua={class:"visualization-content"},da={key:0,class:"weights-section"},va={key:0,class:"all-neurons-grid"},ha=["onClick"],ga={class:"neuron-header"},pa={class:"neuron-title"},ma={class:"neuron-label"},fa={class:"neuron-id"},_a=["onClick"],ya={class:"neuron-stats"},ba={class:"stat-row"},wa={class:"stat-value"},$a={class:"stat-row"},Ca={class:"stat-value"},Ma={class:"stat-row"},Sa={class:"stat-value"},Ta=["onClick"],xa={key:0,class:"canvas-overlay"},ka={class:"weight-range"},Ia={class:"range-min"},Aa={class:"range-bar"},za={class:"range-max"},Da={key:1,class:"comparison-view"},Na={class:"comparison-grid"},Pa={class:"comparison-header"},Fa={class:"comparison-stats"},Wa=["width","height"],La={key:2,class:"single-neuron-view"},Ra={class:"neuron-detail-header"},Ua={class:"detail-title"},Ea={class:"neuron-detail-stats"},qa={class:"stat-grid"},Ha={class:"stat-item"},Va={class:"stat-value"},Ba={class:"stat-item"},Oa={class:"stat-value"},Ga={class:"stat-item"},Qa={class:"stat-value"},Ja={class:"stat-item"},Xa={class:"stat-value"},ja={class:"stat-item"},Ka={class:"stat-value"},Ya={class:"stat-item"},Za={class:"stat-value"},tn={class:"detail-visualization"},en={class:"detail-canvas-container"},sn=["width","height"],an={class:"canvas-info"},nn={class:"colormap-legend"},on={class:"legend-label"},ln={class:"legend-label"},rn={class:"weight-histogram"},cn={class:"histogram-stats"},un={class:"hist-stat"},dn={class:"hist-value"},vn={class:"hist-stat"},hn={class:"hist-value"},gn={key:1,class:"activations-view"},pn={class:"activations-content"},mn={class:"sample-input-section"},fn={class:"sample-container"},_n=["width","height"],yn={key:0,class:"sample-info"},bn={class:"info-item"},wn={class:"info-value prediction"},$n={class:"info-item"},Cn={class:"info-value confidence"},Mn={class:"activations-display"},Sn={class:"activations-grid"},Tn={class:"activation-header"},xn={class:"activation-label"},kn={class:"activation-value"},In={class:"activation-bar-wrapper"},An={key:0,class:"activation-details"},zn={class:"similarity-score"},Dn={key:2,class:"similarity-view"},Nn={class:"similarity-header"},Pn={class:"similarity-controls"},Fn={class:"similarity-content"},Wn={class:"test-input-display"},Ln=["width","height"],Rn={class:"metrics-comparison"},Un={class:"metric-header"},En=["onClick"],qn={class:"metric-bars"},Hn={class:"metric-neuron-label"},Vn={class:"metric-bar"},Bn={class:"metric-value"},On={class:"info-panel"},Gn={class:"info-section"},Qn={class:"info-grid"},Jn={class:"info-item"},Xn={class:"info-value"},jn={class:"info-item"},Kn={class:"info-value"},Yn={class:"info-item"},Zn={class:"info-value"},ti={class:"info-section"},ei={class:"info-grid"},si={class:"info-item"},ai={class:"info-value"},ni={class:"info-item"},ii={class:"info-value"},oi={class:"info-item"},li={class:"info-value"},ri={class:"info-section"},ci={class:"info-grid"},ui={class:"info-item"},di={class:"info-value performance"},vi={class:"info-item"},hi={class:"info-value performance"},gi={class:"info-item"},pi={class:"info-value performance"},qt=28,Se=224,mi=Ut({__name:"MNISTVisualization",setup(h){function e(s){return getComputedStyle(document.documentElement).getPropertyValue(s).trim()}function d(s){const a=e(s);if(a.includes(" ")){const[r,f,F]=a.split(" ").map(U=>parseInt(U));return`rgb(${r}, ${f}, ${F})`}return a}const n=Vt(),i=m("weights"),u=m("all"),w=m("diverging"),C=m("normal"),k=m(!1),R=m(null),T=m(!1),_=m(!1),N=m(null),P=m(0),O=m(!1),Q=K(()=>n.currentLoss),H=m(!1),A=m(0),$=m(0),x=m(0),q=m(0),tt=m({}),it=m({}),at=m(null),dt=m(null),ot=m(null),Tt=m(null),ht=m(new Array(784).fill(0)),lt=m(null),vt=m("random"),$t=m(!1),Pt=[{id:"weights",label:"Weights",icon:ge,description:"View weight matrices as images"},{id:"activations",label:"Activations",icon:pe,description:"Real-time neural activations"},{id:"similarity",label:"Similarity",icon:Ae,description:"Compare similarity metrics"}],kt=[{id:"dotProduct",label:"Dot Product"},{id:"euclidean",label:"Euclidean"},{id:"yatProduct",label:"YAT Product"},{id:"cosine",label:"Cosine"},{id:"manhattan",label:"Manhattan"},{id:"rbf",label:"RBF"}],xt=["0","1","2","3","4","5","6","7","8","9"],B=K(()=>u.value==="all"||u.value==="comparison"?null:n.neurons.find(s=>s.id===parseInt(u.value))||null);function yt(s){return xt[s]||`Class ${s}`}function Ct(s){const r=Date.now()-s;return r<1e3?"now":r<6e4?`${Math.floor(r/1e3)}s ago`:r<36e5?`${Math.floor(r/6e4)}m ago`:`${Math.floor(r/36e5)}h ago`}async function zt(){if(!(!n.apiConnected||T.value)){T.value=!0,_.value=!1;try{await n.forceWeightSync(),N.value=Date.now(),await It()}catch(s){console.error("Force sync failed:",s),_.value=!0}finally{T.value=!1}}}function Mt(){n.autoSyncWeights=!n.autoSyncWeights,n.autoSyncWeights?n.startWeightSync():n.stopWeightSync()}function D(){console.log("Update rate changed to:",C.value)}function L(s){R.value=s,k.value=!0}function rt(){k.value=!1,R.value=null}function St(s){const a=n.neurons.findIndex(r=>r.id===s.id);a!==-1&&(n.neurons[a]=s,It())}function I(s){return console.log(s),Date.now()-(N.value||0)<2e3}function g(s){return Math.sqrt(s.weights.reduce((a,r)=>a+r*r,0))}function v(s){return s.weights.reduce((a,r)=>a+r,0)/s.weights.length}function p(s){const a=v(s),r=s.weights.reduce((f,F)=>f+Math.pow(F-a,2),0)/s.weights.length;return Math.sqrt(r)}function z(s){const a=s.reduce((F,U)=>F+U,0)/s.length,r=Math.sqrt(s.reduce((F,U)=>F+Math.pow(U-a,2),0)/s.length);return s.reduce((F,U)=>F+Math.pow((U-a)/r,3),0)/s.length}function S(s){const a=s.reduce((F,U)=>F+U,0)/s.length,r=Math.sqrt(s.reduce((F,U)=>F+Math.pow(U-a,2),0)/s.length);return s.reduce((F,U)=>F+Math.pow((U-a)/r,4),0)/s.length-3}function o(s,a){if(lt.value?.similarity_breakdown?.[a])return Math.max(0,Math.min(1,lt.value.similarity_breakdown[a].activation_value||0));if(ht.value.length===0)return 0;try{const r=ee(s,ht.value,n.similarityMetric);return Math.max(0,Math.min(1,(r+5)/10))}catch{return 0}}function y(s){return`hsl(${(1-s)*240}, 70%, 50%)`}function W(s,a){if(ht.value.length===0)return 0;try{const r=ee(s,ht.value,a);return Math.max(0,Math.min(1,(r+5)/10))}catch{return 0}}function G(s){return`hsl(${s*60+240}, 70%, 50%)`}async function et(){ht.value=new Array(784).fill(0).map(()=>Math.random()),await Ot(),await bt()}async function ft(){try{const s=await n.getTrainingBatch(1);s.length>0&&(ht.value=s[0].features,await Ot(),await bt())}catch(s){console.warn("Failed to load test sample:",s),et()}}function Y(){ht.value=new Array(784).fill(0),lt.value=null,Ot()}async function bt(){if(n.apiConnected&&ht.value.length>0)try{lt.value=await n.getActivationsForVisualization(ht.value)}catch(s){console.warn("Failed to get API activations:",s),lt.value=null}}function st(s){n.similarityMetric=s,nt()}async function nt(){switch(vt.value){case"zeros":ht.value=new Array(784).fill(0);break;case"ones":ht.value=new Array(784).fill(1);break;case"test_sample":await ft();return;case"random":default:await et();return}await Kt()}async function pt(){B.value&&(B.value.weights=Array.from({length:784},()=>(Math.random()-.5)*.1),B.value.bias=0,await n.syncWeightsToApi(),await It())}async function Dt(){B.value&&(B.value.weights=Array.from({length:784},()=>(Math.random()-.5)*.5),B.value.bias=(Math.random()-.5)*.1,await n.syncWeightsToApi(),await It())}function jt(s,a){const r=s.getContext("2d");if(!r||a.length!==784){console.warn("❌ renderWeightCanvas: Invalid context or weights length:",{hasContext:!!r,weightsLength:a.length,expected:784});return}try{const f=Math.min(...a),U=Math.max(...a)-f||.001;r.clearRect(0,0,s.width,s.height);const J=Qe(a,28,28),Z=r.createImageData(28,28);for(let X=0;X<28;X++)for(let Ft=0;Ft<28;Ft++){let ue=(J[X][Ft]-f)/U;ue=Math.max(0,Math.min(1,ue));const de=re(ue,w.value),ne=(X*28+Ft)*4;Z.data[ne]=de.r,Z.data[ne+1]=de.g,Z.data[ne+2]=de.b,Z.data[ne+3]=255}const mt=document.createElement("canvas");mt.width=28,mt.height=28,mt.getContext("2d").putImageData(Z,0,0),r.imageSmoothingEnabled=!1,r.drawImage(mt,0,0,s.width,s.height)}catch(f){console.error("Error rendering weight canvas:",f)}}function re(s,a){switch(s=Math.max(0,Math.min(1,s)),a){case"diverging":if(s<.5){const F=s*2;return{r:Math.round(F*255),g:Math.round(F*255),b:255}}else{const F=(s-.5)*2;return{r:255,g:Math.round((1-F)*255),b:Math.round((1-F)*255)}}case"viridis":return{r:Math.round(s*68+(1-s)*68),g:Math.round(s*1+(1-s)*1),b:Math.round(s*84+(1-s)*84)};case"grayscale":const r=Math.round(s*255);return{r,g:r,b:r};default:const f=Math.round(s*255);return{r:f,g:f,b:f}}}async function Ot(){const s=ot.value;if(!s)return;const a=s.getContext("2d");if(!a)return;a.clearRect(0,0,s.width,s.height);const r=a.createImageData(28,28);for(let U=0;U<784;U++){const J=Math.round(ht.value[U]*255),Z=U*4;r.data[Z]=J,r.data[Z+1]=J,r.data[Z+2]=J,r.data[Z+3]=255}const f=document.createElement("canvas");f.width=28,f.height=28,f.getContext("2d").putImageData(r,0,0),a.imageSmoothingEnabled=!1,a.drawImage(f,0,0,s.width,s.height)}async function Kt(){Tt.value&&await Ot()}async function It(){$t.value=!0;try{for(const s of n.neurons){const a=tt.value[s.id];a&&jt(a,s.weights);const r=it.value[s.id];r&&jt(r,s.weights)}B.value&&at.value&&(jt(at.value,B.value.weights),ce())}finally{$t.value=!1}}function ce(){if(!B.value||!dt.value)return;const s=dt.value,a=s.getContext("2d");if(!a)return;const r=B.value.weights,f=20,F=Math.min(...r),J=(Math.max(...r)-F)/f,Z=new Array(f).fill(0);for(const X of r){const Ft=Math.min(f-1,Math.floor((X-F)/J));Z[Ft]++}const mt=Math.max(...Z);a.clearRect(0,0,s.width,s.height),a.fillStyle=d("--color-primary");const Wt=s.width/f;for(let X=0;X<f;X++){const Ft=Z[X]/mt*s.height;a.fillRect(X*Wt,s.height-Ft,Wt-1,Ft)}}return ut(()=>n.visualizationUpdateTrigger,It),ut(()=>n.neurons,It,{deep:!0}),ut(()=>i.value,It),ut(()=>w.value,It),ut(()=>n.isTraining,s=>{H.value=s,s&&(P.value=n.optimizationHistory.currentStep)}),ut(()=>n.optimizationHistory.currentStep,s=>{if(P.value=s,n.isTraining&&s>0){const a=n.optimizationHistory.steps;if(a.length>=2){const r=a.slice(-5);if(r.length>=2){const f=r[r.length-1].timestamp-r[0].timestamp,F=r.length-1;f>0&&($.value=F/(f/1e3)||0)}}}}),ut(()=>n.currentLoss,(s,a)=>{a!==void 0&&(x.value=a),console.log(s)}),ut(()=>n.trainAccuracy,(s,a)=>{a!==void 0&&(q.value=a),console.log(s)}),ut(()=>n.neurons,(s,a)=>{if(n.isTraining&&a){let r=0;s.forEach((f,F)=>{a[F]&&JSON.stringify(f.weights)!==JSON.stringify(a[F].weights)&&r++}),r>0&&(A.value=r,O.value=!0,setTimeout(()=>{A.value=0,O.value=!1},2e3))}},{deep:!0}),Xt(()=>{Bt.on(It),It(),et()}),ae(()=>{Bt.off(It)}),(s,a)=>(b(),M(_t,null,[t("div",Xs,[t("div",js,[t("div",Ks,[t("div",Ys,[(b(),M(_t,null,wt(Pt,r=>t("button",{key:r.id,onClick:f=>i.value=r.id,class:E(["mode-btn",{active:i.value===r.id}]),title:r.description},[(b(),Lt(ye(r.icon),{class:"mode-icon"})),t("span",null,l(r.label),1)],10,Zs)),64))]),t("div",ta,[t("div",{class:E(["sync-status",{connected:c(n).apiConnected,syncing:T.value,error:_.value}])},[a[4]||(a[4]=t("div",{class:"status-dot"},null,-1)),t("span",ea,l(c(n).apiConnected?T.value?"Syncing...":"API Connected":"Local Mode"),1),N.value?(b(),M("span",sa," Last sync: "+l(Ct(N.value)),1)):V("",!0)],2),t("button",{onClick:zt,disabled:!c(n).apiConnected||T.value,class:"sync-btn",title:"Force sync weights from API"},[t("div",{class:E(["sync-icon",{spinning:T.value}])},"🔄",2),a[5]||(a[5]=ct(" Sync "))],8,aa),t("button",{onClick:Mt,class:E(["auto-sync-btn",{active:c(n).autoSyncWeights}]),title:"Toggle automatic weight synchronization"},[t("div",na,l(c(n).autoSyncWeights?"🔄":"⏸️"),1),a[6]||(a[6]=ct(" Auto "))],2)])]),t("div",ia,[t("div",oa,[a[9]||(a[9]=t("label",{class:"control-label"},"View:",-1)),Nt(t("select",{"onUpdate:modelValue":a[0]||(a[0]=r=>u.value=r),class:"neuron-select"},[a[7]||(a[7]=t("option",{value:"all"},"All Classes (Grid)",-1)),a[8]||(a[8]=t("option",{value:"comparison"},"Side Comparison",-1)),(b(!0),M(_t,null,wt(c(n).neurons,r=>(b(),M("option",{key:r.id,value:r.id}," Class "+l(r.id)+" - "+l(yt(r.id)),9,la))),128))],512),[[Ht,u.value]])]),i.value==="weights"?(b(),M("div",ra,[a[11]||(a[11]=t("label",{class:"control-label"},"Colormap:",-1)),Nt(t("select",{"onUpdate:modelValue":a[1]||(a[1]=r=>w.value=r),class:"colormap-select",onChange:It},a[10]||(a[10]=[te('<option value="diverging" data-v-414326d5>Diverging (Blue-Red)</option><option value="viridis" data-v-414326d5>Viridis</option><option value="plasma" data-v-414326d5>Plasma</option><option value="grayscale" data-v-414326d5>Grayscale</option><option value="cool" data-v-414326d5>Cool</option><option value="hot" data-v-414326d5>Hot</option>',6)]),544),[[Ht,w.value]])])):V("",!0),t("div",ca,[a[13]||(a[13]=t("label",{class:"control-label"},"Update Rate:",-1)),Nt(t("select",{"onUpdate:modelValue":a[2]||(a[2]=r=>C.value=r),onChange:D,class:"update-rate-select"},a[12]||(a[12]=[te('<option value="realtime" data-v-414326d5>Real-time</option><option value="fast" data-v-414326d5>Fast (1s)</option><option value="normal" data-v-414326d5>Normal (3s)</option><option value="slow" data-v-414326d5>Slow (10s)</option><option value="manual" data-v-414326d5>Manual</option>',5)]),544),[[Ht,C.value]])])])]),t("div",ua,[i.value==="weights"?(b(),M("div",da,[u.value==="all"?(b(),M("div",va,[(b(!0),M(_t,null,wt(c(n).neurons,r=>(b(),M("div",{key:r.id,class:E(["neuron-weight-container",{selected:u.value===r.id.toString(),"high-activity":A.value>0&&I(r.id)}]),onClick:f=>L(r)},[t("div",ga,[t("div",pa,[t("span",ma,l(yt(r.id)),1),t("span",fa,"Class "+l(r.id),1),t("button",{onClick:he(f=>L(r),["stop"]),class:"expand-btn",title:"Click to expand weight visualization"}," 🔍 ",8,_a)]),t("div",ya,[t("div",ba,[a[14]||(a[14]=t("span",{class:"stat-label"},"‖w‖:",-1)),t("span",wa,l(g(r).toFixed(3)),1)]),t("div",$a,[a[15]||(a[15]=t("span",{class:"stat-label"},"μ:",-1)),t("span",Ca,l(v(r).toFixed(3)),1)]),t("div",Ma,[a[16]||(a[16]=t("span",{class:"stat-label"},"σ:",-1)),t("span",Sa,l(p(r).toFixed(3)),1)])])]),t("div",{class:"canvas-container",onClick:he(f=>L(r),["stop"])},[t("canvas",{ref_for:!0,ref:f=>{f&&(tt.value[r.id]=f)},class:"weight-canvas enhanced",width:Se,height:Se},null,512),$t.value?(b(),M("div",xa,a[17]||(a[17]=[t("div",{class:"update-spinner"},null,-1)]))):V("",!0),a[18]||(a[18]=t("div",{class:"canvas-overlay-hover"},[t("div",{class:"hover-text"},[t("span",{class:"hover-icon"},"🔍"),t("span",null,"Click to expand")])],-1))],8,Ta),t("div",ka,[t("span",Ia,l(Math.min(...r.weights).toFixed(2)),1),t("div",Aa,[t("div",{class:"range-fill",style:At({width:`${Math.abs(v(r))*100}%`,backgroundColor:r.color})},null,4)]),t("span",za,l(Math.max(...r.weights).toFixed(2)),1)])],10,ha))),128))])):u.value==="comparison"?(b(),M("div",Da,[t("div",Na,[(b(!0),M(_t,null,wt(c(n).neurons,r=>(b(),M("div",{key:r.id,class:"comparison-item"},[t("div",Pa,[t("h4",null,l(yt(r.id)),1),t("div",Fa,[t("span",null,"‖w‖: "+l(g(r).toFixed(3)),1)])]),t("canvas",{ref_for:!0,ref:f=>{f&&(it.value[r.id]=f)},class:"comparison-canvas",width:qt*2,height:qt*2},null,8,Wa)]))),128))])])):B.value?(b(),M("div",La,[t("div",Ra,[t("div",Ua,[t("h3",null,l(yt(B.value.id))+" (Class "+l(B.value.id)+")",1),t("div",{class:"detail-actions"},[t("button",{onClick:pt,class:"reset-btn"},"Reset Weights"),t("button",{onClick:Dt,class:"randomize-btn"},"Randomize")])]),t("div",Ea,[t("div",qa,[t("div",Ha,[a[19]||(a[19]=t("span",{class:"stat-label"},"Weight Norm (‖w‖):",-1)),t("span",Va,l(g(B.value).toFixed(4)),1)]),t("div",Ba,[a[20]||(a[20]=t("span",{class:"stat-label"},"Bias (b):",-1)),t("span",Oa,l(B.value.bias.toFixed(4)),1)]),t("div",Ga,[a[21]||(a[21]=t("span",{class:"stat-label"},"Mean Weight (μ):",-1)),t("span",Qa,l(v(B.value).toFixed(4)),1)]),t("div",Ja,[a[22]||(a[22]=t("span",{class:"stat-label"},"Std Dev (σ):",-1)),t("span",Xa,l(p(B.value).toFixed(4)),1)]),t("div",ja,[a[23]||(a[23]=t("span",{class:"stat-label"},"Min Weight:",-1)),t("span",Ka,l(Math.min(...B.value.weights).toFixed(4)),1)]),t("div",Ya,[a[24]||(a[24]=t("span",{class:"stat-label"},"Max Weight:",-1)),t("span",Za,l(Math.max(...B.value.weights).toFixed(4)),1)])])])]),t("div",tn,[t("div",en,[t("canvas",{ref_key:"detailCanvas",ref:at,class:"weight-canvas-large",width:qt*6,height:qt*6},null,8,sn),t("div",an,[t("div",nn,[t("span",on,l(Math.min(...B.value.weights).toFixed(3)),1),t("div",{class:E(["legend-gradient",`${w.value}-gradient`])},null,2),t("span",ln,l(Math.max(...B.value.weights).toFixed(3)),1)])])]),t("div",rn,[a[27]||(a[27]=t("h4",null,"Weight Distribution",-1)),t("canvas",{ref_key:"histogramCanvas",ref:dt,class:"histogram-canvas",width:"400",height:"200"},null,512),t("div",cn,[t("div",un,[a[25]||(a[25]=t("span",{class:"hist-label"},"Skewness:",-1)),t("span",dn,l(z(B.value.weights).toFixed(3)),1)]),t("div",vn,[a[26]||(a[26]=t("span",{class:"hist-label"},"Kurtosis:",-1)),t("span",hn,l(S(B.value.weights).toFixed(3)),1)])])])])])):V("",!0)])):i.value==="activations"?(b(),M("div",gn,[t("div",{class:"activations-header"},[a[28]||(a[28]=t("h3",null,"Real-time Neural Activations",-1)),t("div",{class:"activation-controls"},[t("button",{onClick:et,class:"sample-btn"}," 🎲 Random Sample "),t("button",{onClick:ft,class:"sample-btn"}," 📊 Test Sample "),t("button",{onClick:Y,class:"sample-btn"}," 🗑️ Clear ")])]),t("div",pn,[t("div",mn,[t("div",fn,[a[31]||(a[31]=t("h4",null,"Input Sample",-1)),t("canvas",{ref_key:"sampleCanvas",ref:ot,class:"sample-canvas",width:qt*4,height:qt*4,onClick:et},null,8,_n),a[32]||(a[32]=t("p",{class:"sample-hint"},"Click to generate a new random sample",-1)),lt.value?(b(),M("div",yn,[t("div",bn,[a[29]||(a[29]=t("span",{class:"info-label"},"Predicted:",-1)),t("span",wn,l(lt.value.predicted_class),1)]),t("div",$n,[a[30]||(a[30]=t("span",{class:"info-label"},"Confidence:",-1)),t("span",Cn,l((lt.value.confidence*100).toFixed(1))+"%",1)])])):V("",!0)])]),t("div",Mn,[t("div",Sn,[(b(!0),M(_t,null,wt(c(n).neurons,(r,f)=>(b(),M("div",{key:r.id,class:"activation-item"},[t("div",Tn,[t("span",xn,l(yt(r.id)),1),t("span",kn,l(o(r,f).toFixed(3)),1)]),t("div",In,[t("div",{class:"activation-bar",style:At({width:`${Math.max(2,o(r,f)*100)}%`,backgroundColor:y(o(r,f))})},null,4)]),lt.value?(b(),M("div",An,[t("span",zn," Sim: "+l(lt.value.similarity_breakdown?.[f]?.similarity_score?.toFixed(3)||"0.000"),1)])):V("",!0)]))),128))])])])])):i.value==="similarity"?(b(),M("div",Dn,[t("div",Nn,[a[35]||(a[35]=t("h3",null,"Similarity Metrics Comparison",-1)),t("div",Pn,[a[34]||(a[34]=t("label",{class:"control-label"},"Test Input:",-1)),Nt(t("select",{"onUpdate:modelValue":a[3]||(a[3]=r=>vt.value=r),onChange:nt},a[33]||(a[33]=[t("option",{value:"random"},"Random Pattern",-1),t("option",{value:"zeros"},"All Zeros",-1),t("option",{value:"ones"},"All Ones",-1),t("option",{value:"test_sample"},"Test Sample",-1)]),544),[[Ht,vt.value]])])]),t("div",Fn,[t("div",Wn,[t("canvas",{ref_key:"similarityInputCanvas",ref:Tt,class:"similarity-input-canvas",width:qt*3,height:qt*3},null,8,Ln)]),t("div",Rn,[(b(),M(_t,null,wt(kt,r=>t("div",{key:r.id,class:E(["metric-section",{active:c(n).similarityMetric===r.id}])},[t("div",Un,[t("h5",null,l(r.label),1),t("button",{onClick:f=>st(r.id),class:E(["metric-select-btn",{active:c(n).similarityMetric===r.id}])},l(c(n).similarityMetric===r.id?"Active":"Select"),11,En)]),t("div",qn,[(b(!0),M(_t,null,wt(c(n).neurons,f=>(b(),M("div",{key:f.id,class:"metric-bar-container"},[t("span",Hn,l(yt(f.id)),1),t("div",Vn,[t("div",{class:"metric-bar-fill",style:At({width:`${Math.max(2,W(f,r.id)*100)}%`,backgroundColor:G(W(f,r.id))})},null,4)]),t("span",Bn,l(W(f,r.id).toFixed(3)),1)]))),128))])],2)),64))])])])):V("",!0)]),t("div",On,[t("div",Gn,[a[39]||(a[39]=t("h4",null,"Dataset Info",-1)),t("div",Qn,[t("div",Jn,[a[36]||(a[36]=t("span",{class:"info-label"},"Dataset:",-1)),t("span",Xn,l(c(n).selectedDataset||"Local"),1)]),t("div",jn,[a[37]||(a[37]=t("span",{class:"info-label"},"Train Size:",-1)),t("span",Kn,l(c(n).datasetInfo.trainSize.toLocaleString()),1)]),t("div",Yn,[a[38]||(a[38]=t("span",{class:"info-label"},"Test Size:",-1)),t("span",Zn,l(c(n).datasetInfo.testSize.toLocaleString()),1)])])]),t("div",ti,[a[43]||(a[43]=t("h4",null,"Model Config",-1)),t("div",ei,[t("div",si,[a[40]||(a[40]=t("span",{class:"info-label"},"Similarity:",-1)),t("span",ai,l(c(n).similarityMetric),1)]),t("div",ni,[a[41]||(a[41]=t("span",{class:"info-label"},"Activation:",-1)),t("span",ii,l(c(n).activationFunction),1)]),t("div",oi,[a[42]||(a[42]=t("span",{class:"info-label"},"Classes:",-1)),t("span",li,l(c(n).activeClasses.length)+"/10",1)])])]),t("div",ri,[a[47]||(a[47]=t("h4",null,"Performance",-1)),t("div",ci,[t("div",ui,[a[44]||(a[44]=t("span",{class:"info-label"},"Train Acc:",-1)),t("span",di,l(c(n).trainAccuracy.toFixed(1))+"%",1)]),t("div",vi,[a[45]||(a[45]=t("span",{class:"info-label"},"Test Acc:",-1)),t("span",hi,l(c(n).testAccuracy.toFixed(1))+"%",1)]),t("div",gi,[a[46]||(a[46]=t("span",{class:"info-label"},"Loss:",-1)),t("span",pi,l(Q.value.toFixed(4)),1)])])])])]),R.value?(b(),Lt(Js,{key:0,neuron:R.value,"is-visible":k.value,colormap:w.value,onClose:rt,onUpdateNeuron:St},null,8,["neuron","is-visible","colormap"])):V("",!0)],64))}});const Te=Et(mi,[["__scopeId","data-v-414326d5"]]),fi={class:"mnist-class-toggles"},_i={class:"toggles-container"},yi=["onClick","disabled","title"],bi={class:"digit-label"},wi={class:"digit-count"},$i={class:"toggle-actions"},Ci=["disabled"],Mi=["disabled"],Si=Ut({__name:"MNISTClassToggles",setup(h){const e=Vt(),d=[0,1,2,3,4,5,6,7,8,9],n=K(()=>e.activeClasses.length===10),i=K(()=>e.activeClasses.every(k=>k%2===0));function u(k){return e.filteredTrainData.filter(R=>R.label===k).length}function w(){n.value?e.activeClasses=[]:e.activeClasses=[0,1,2,3,4,5,6,7,8,9]}function C(){i.value?e.activeClasses=[1,3,5,7,9]:e.activeClasses=[0,2,4,6,8]}return(k,R)=>(b(),M("div",fi,[t("div",_i,[(b(),M(_t,null,wt(d,T=>t("button",{key:T,onClick:_=>c(e).toggleClass(T),class:E(["digit-toggle",{active:c(e).activeClasses.includes(T),training:c(e).isTraining}]),disabled:c(e).isTraining,title:`Toggle digit ${T}`},[t("span",bi,l(T),1),t("span",wi,l(u(T)),1)],10,yi)),64))]),t("div",$i,[t("button",{onClick:w,class:"action-btn",disabled:c(e).isTraining},l(n.value?"Hide All":"Show All"),9,Ci),t("button",{onClick:C,class:"action-btn",disabled:c(e).isTraining},l(i.value?"Odds Only":"Evens Only"),9,Mi)])]))}});const Ti=Et(Si,[["__scopeId","data-v-9d8b924b"]]),xi={class:"mnist-data-panel"},ki={class:"panel-section"},Ii={class:"dataset-selector"},Ai=["disabled"],zi=["value"],Di={key:0,class:"api-status"},Ni={key:1,class:"api-status"},Pi={class:"panel-section"},Fi={key:0,class:"dataset-stats"},Wi={class:"stat-card"},Li={class:"stat-value"},Ri={class:"stat-card"},Ui={class:"stat-value"},Ei={class:"stat-card"},qi={class:"stat-value"},Hi={class:"dataset-actions"},Vi=["disabled"],Bi=["disabled"],Oi=["disabled"],Gi={key:1,class:"loading-indicator"},Qi={key:0,class:"panel-section"},Ji={class:"class-distribution"},Xi={class:"class-label"},ji={class:"class-bar-wrapper"},Ki={class:"class-count"},Yi={key:1,class:"panel-section"},Zi={class:"sample-grid"},to=["onClick"],eo={class:"sample-label"},so=Ut({__name:"MNISTDataPanel",setup(h){const e=Vt(),d=be(),n=m(!1),i=m([]),u=m({}),w=[0,1,2,3,4,5,6,7,8,9],C=K(()=>Math.max(...w.map($=>k($))));function k($){return e.trainData.filter(x=>x.label===$).length}function R($){return C.value===0?0:k($)/C.value*100}function T($){return["#ff6b6b","#4ecdc4","#45b7d1","#96ceb4","#feca57","#ff9ff3","#54a0ff","#5f27cd","#00d2d3","#ff9f43"][$]||"#cccccc"}async function _(){n.value=!0;try{await e.quickTest(200),d.addNotification({message:"Quick demo loaded successfully!",type:"success"}),H()}catch($){d.addNotification({message:`Failed to load demo: ${$}`,type:"error"})}finally{n.value=!1}}async function N(){n.value=!0;try{await e.loadDataset({train:1e3,test:200}),d.addNotification({message:"Small dataset loaded successfully!",type:"success"}),H()}catch($){d.addNotification({message:`Failed to load dataset: ${$}`,type:"error"})}finally{n.value=!1}}async function P(){n.value=!0;try{await e.loadDataset({train:5e3,test:1e3}),d.addNotification({message:"Medium dataset loaded successfully!",type:"success"}),H()}catch($){d.addNotification({message:`Failed to load dataset: ${$}`,type:"error"})}finally{n.value=!1}}async function O(){console.log(`Dataset changed to: ${e.selectedDataset}`),d.addNotification({message:`Switched to ${e.selectedDataset} dataset. Load data to see changes.`,type:"info"})}function Q($){d.addNotification({message:`Selected sample: digit ${$.label}`,type:"info"})}function H(){if(e.trainData.length!==0){i.value=[];for(const $ of w){const x=e.trainData.filter(q=>q.label===$);if(x.length>0){const q=Math.floor(Math.random()*x.length);i.value.push(x[q])}}Jt(()=>{A()})}}function A(){i.value.forEach(($,x)=>{const q=u.value[x];if(!q)return;const tt=q.getContext("2d");if(!tt)return;const it=tt.createImageData(28,28);for(let at=0;at<784;at++){const dt=Math.floor($.features[at]*255),ot=at*4;it.data[ot]=dt,it.data[ot+1]=dt,it.data[ot+2]=dt,it.data[ot+3]=255}tt.putImageData(it,0,0)})}return ut(()=>e.trainData,H,{deep:!0}),Xt(()=>{e.trainData.length>0&&H()}),($,x)=>(b(),M("div",xi,[t("div",ki,[x[4]||(x[4]=t("h3",{class:"section-title"},"Dataset Selection",-1)),t("div",Ii,[x[1]||(x[1]=t("label",{class:"selector-label"},"Choose Dataset:",-1)),Nt(t("select",{"onUpdate:modelValue":x[0]||(x[0]=q=>c(e).selectedDataset=q),onChange:O,class:"dataset-select",disabled:n.value},[(b(!0),M(_t,null,wt(c(e).availableDatasets,(q,tt)=>(b(),M("option",{key:tt,value:tt},l(q.description),9,zi))),128))],40,Ai),[[Ht,c(e).selectedDataset]])]),c(e).apiConnected?(b(),M("div",Di,x[2]||(x[2]=[t("div",{class:"status-indicator connected"},[t("div",{class:"status-dot"}),t("span",null,"API Connected - Real Datasets Available")],-1)]))):(b(),M("div",Ni,x[3]||(x[3]=[t("div",{class:"status-indicator disconnected"},[t("div",{class:"status-dot"}),t("span",null,"API Offline - Using Synthetic Data")],-1)])))]),t("div",Pi,[x[12]||(x[12]=t("h3",{class:"section-title"},"Dataset",-1)),c(e).datasetInfo.trainSize>0?(b(),M("div",Fi,[t("div",Wi,[t("div",Li,l(c(e).datasetInfo.trainSize),1),x[5]||(x[5]=t("div",{class:"stat-label"},"Training Samples",-1))]),t("div",Ri,[t("div",Ui,l(c(e).datasetInfo.testSize),1),x[6]||(x[6]=t("div",{class:"stat-label"},"Test Samples",-1))]),t("div",Ei,[t("div",qi,l(c(e).datasetInfo.numFeatures),1),x[7]||(x[7]=t("div",{class:"stat-label"},"Features",-1))])])):V("",!0),t("div",Hi,[t("button",{onClick:_,class:"action-btn primary",disabled:n.value},[gt(c(le),{class:"btn-icon"}),x[8]||(x[8]=ct(" Quick Demo (200 samples) "))],8,Vi),t("button",{onClick:N,class:"action-btn",disabled:n.value},[gt(c(me),{class:"btn-icon"}),x[9]||(x[9]=ct(" Small Dataset (1K samples) "))],8,Bi),t("button",{onClick:P,class:"action-btn",disabled:n.value},[gt(c(oe),{class:"btn-icon"}),x[10]||(x[10]=ct(" Medium Dataset (5K samples) "))],8,Oi)]),n.value?(b(),M("div",Gi,x[11]||(x[11]=[t("div",{class:"loading-spinner"},null,-1),t("span",null,"Loading dataset...",-1)]))):V("",!0)]),c(e).datasetInfo.trainSize>0?(b(),M("div",Qi,[x[13]||(x[13]=t("h3",{class:"section-title"},"Class Distribution",-1)),t("div",Ji,[(b(),M(_t,null,wt(w,q=>t("div",{key:q,class:"class-bar-container"},[t("span",Xi,l(q),1),t("div",ji,[t("div",{class:"class-bar",style:At({width:`${R(q)}%`,backgroundColor:T(q)})},null,4),t("span",Ki,l(k(q)),1)])])),64))])])):V("",!0),c(e).datasetInfo.trainSize>0?(b(),M("div",Yi,[x[15]||(x[15]=t("h3",{class:"section-title"},"Sample Visualization",-1)),t("div",Zi,[(b(!0),M(_t,null,wt(i.value,(q,tt)=>(b(),M("div",{key:tt,class:"sample-container",onClick:it=>Q(q)},[t("canvas",{ref_for:!0,ref:it=>{it&&(u.value[tt]=it)},class:"sample-canvas",width:"28",height:"28"},null,512),t("span",eo,l(q.label),1)],8,to))),128))]),t("button",{onClick:H,class:"refresh-btn"},[gt(c(we),{class:"btn-icon"}),x[14]||(x[14]=ct(" Refresh Samples "))])])):V("",!0)]))}});const ao=Et(so,[["__scopeId","data-v-6c752c64"]]),no={class:"mnist-network-config"},io={class:"config-section"},oo=["value"],lo={class:"config-description"},ro={class:"config-section"},co=["value"],uo={class:"config-description"},vo={class:"config-section"},ho={class:"ternary-controls"},go={class:"toggle-group"},po={class:"toggle-label"},mo=["checked"],fo={key:0,class:"ternary-config"},_o={class:"sparsity-control"},yo={class:"sparsity-input-group"},bo=["value"],wo={class:"sparsity-value"},$o={class:"ternary-actions"},Co=["disabled"],Mo=["disabled"],So=["disabled"],To={key:0,class:"ternary-stats"},xo={class:"stats-grid"},ko={class:"stat-item"},Io={class:"stat-value"},Ao={class:"stat-item"},zo={class:"stat-value"},Do={class:"stat-item"},No={class:"stat-value"},Po={class:"stats-info"},Fo={class:"config-description"},Wo=Ut({__name:"MNISTNetworkConfig",props:{similarityMetric:{},activationFunction:{}},emits:["update-similarity","update-activation","initialize-ternary","quantize-weights","refresh-stats"],setup(h){const e=Vt();function d(i){switch(i){case"dotProduct":return"Linear similarity measure";case"euclidean":return"Distance-based similarity";case"yatProduct":return"Custom normalized similarity";case"cosine":return"Angular similarity measure";case"manhattan":return"Manhattan distance metric";case"rbf":return"Radial basis function";default:return"Unknown metric"}}function n(i){switch(i){case"none":return"No activation function";case"softmax":return"Probabilistic output";case"softermax":return"Soft probabilistic output";case"sigmoid":return"S-curve activation";case"relu":return"Rectified linear unit";case"gelu":return"Gaussian error linear unit";default:return"Unknown activation"}}return(i,u)=>(b(),M("div",no,[t("div",io,[u[8]||(u[8]=t("h4",{class:"config-title"},"Similarity Metric",-1)),t("select",{value:i.similarityMetric,onChange:u[0]||(u[0]=w=>i.$emit("update-similarity",w.target.value)),class:"config-select"},u[7]||(u[7]=[te('<option value="dotProduct" data-v-efcc9acf>Dot Product</option><option value="euclidean" data-v-efcc9acf>Euclidean Distance</option><option value="yatProduct" data-v-efcc9acf>YAT Product</option><option value="cosine" data-v-efcc9acf>Cosine Similarity</option><option value="manhattan" data-v-efcc9acf>Manhattan Distance</option><option value="rbf" data-v-efcc9acf>RBF Kernel</option>',6)]),40,oo),t("p",lo,l(d(i.similarityMetric)),1)]),t("div",ro,[u[10]||(u[10]=t("h4",{class:"config-title"},"Activation Function",-1)),t("select",{value:i.activationFunction,onChange:u[1]||(u[1]=w=>i.$emit("update-activation",w.target.value)),class:"config-select"},u[9]||(u[9]=[te('<option value="none" data-v-efcc9acf>None</option><option value="softmax" data-v-efcc9acf>Softmax</option><option value="softermax" data-v-efcc9acf>Softermax</option><option value="sigmoid" data-v-efcc9acf>Sigmoid</option><option value="relu" data-v-efcc9acf>ReLU</option><option value="gelu" data-v-efcc9acf>GELU</option>',6)]),40,co),t("p",uo,l(n(i.activationFunction)),1)]),t("div",vo,[u[18]||(u[18]=t("h4",{class:"config-title"},"Weight Quantization",-1)),t("div",ho,[t("div",go,[t("label",po,[t("input",{type:"checkbox",checked:c(e).useTernaryWeights,onChange:u[2]||(u[2]=w=>c(e).toggleTernaryWeights()),class:"toggle-checkbox"},null,40,mo),u[11]||(u[11]=t("span",{class:"toggle-slider"},null,-1)),u[12]||(u[12]=t("span",{class:"toggle-text"},"Ternary Weights (-1, 0, 1)",-1))])]),c(e).useTernaryWeights?(b(),M("div",fo,[t("div",_o,[u[13]||(u[13]=t("label",{class:"sparsity-label"},"Sparsity Ratio:",-1)),t("div",yo,[t("input",{type:"range",value:c(e).ternarySparsityRatio,onInput:u[3]||(u[3]=w=>c(e).setTernarySparsity(parseFloat(w.target.value))),min:"0",max:"0.9",step:"0.1",class:"sparsity-slider"},null,40,bo),t("span",wo,l((c(e).ternarySparsityRatio*100).toFixed(0))+"%",1)])]),t("div",$o,[t("button",{onClick:u[4]||(u[4]=w=>i.$emit("initialize-ternary")),class:"ternary-btn init-btn",disabled:!c(e).apiConnected,title:"Initialize network with ternary weights"}," 🔧 Initialize ",8,Co),t("button",{onClick:u[5]||(u[5]=w=>i.$emit("quantize-weights")),class:"ternary-btn quantize-btn",disabled:!c(e).apiConnected,title:"Quantize current weights to ternary values"}," ⚡ Quantize ",8,Mo),t("button",{onClick:u[6]||(u[6]=w=>i.$emit("refresh-stats")),class:"ternary-btn stats-btn",disabled:!c(e).apiConnected,title:"Refresh ternary weight statistics"}," 📊 Stats ",8,So)]),c(e).ternaryStats?(b(),M("div",To,[u[17]||(u[17]=t("div",{class:"stats-header"},"Weight Distribution:",-1)),t("div",xo,[t("div",ko,[u[14]||(u[14]=t("span",{class:"stat-label"},"-1:",-1)),t("span",Io,l((c(e).ternaryStats.overall_distribution.negative_one_ratio*100).toFixed(1))+"%",1)]),t("div",Ao,[u[15]||(u[15]=t("span",{class:"stat-label"},"0:",-1)),t("span",zo,l((c(e).ternaryStats.overall_distribution.zero_ratio*100).toFixed(1))+"%",1)]),t("div",Do,[u[16]||(u[16]=t("span",{class:"stat-label"},"+1:",-1)),t("span",No,l((c(e).ternaryStats.overall_distribution.positive_one_ratio*100).toFixed(1))+"%",1)])]),t("div",Po,[t("span",{class:E(["info-text",{valid:c(e).ternaryStats.is_ternary}])},l(c(e).ternaryStats.is_ternary?"✅ Truly Ternary":"⚠️ Not Ternary"),3)])])):V("",!0)])):V("",!0)]),t("p",Fo,l(c(e).useTernaryWeights?"Weights constrained to {-1, 0, 1} for efficiency":"Standard continuous weights"),1)])]))}});const Lo=Et(Wo,[["__scopeId","data-v-efcc9acf"]]),Ro={class:"mnist-training-panel"},Uo={class:"training-status-header"},Eo={class:"status-indicator"},qo={class:"status-text"},Ho={key:0,class:"live-indicator"},Vo={class:"training-metrics-header"},Bo={key:0,class:"training-timer"},Oo={key:1,class:"training-speed"},Go={class:"speed-value"},Qo={class:"training-controls"},Jo={class:"control-grid"},Xo={class:"control-group"},jo={class:"input-with-presets"},Ko=["disabled"],Yo={class:"preset-buttons"},Zo=["disabled"],tl=["disabled"],el=["disabled"],sl={class:"control-group"},al=["disabled"],nl={class:"control-group"},il={class:"input-with-slider"},ol=["disabled"],ll=["disabled"],rl={class:"control-group"},cl={class:"speed-control"},ul={class:"speed-display"},dl={class:"speed-value"},vl={class:"training-actions"},hl={class:"primary-actions"},gl=["disabled"],pl=["disabled"],ml=["disabled"],fl={class:"secondary-actions"},_l=["disabled"],yl=["disabled"],bl=["disabled"],wl={key:0,class:"training-progress"},$l={class:"progress-overview"},Cl={class:"progress-stats-grid"},Ml={class:"stat-card primary"},Sl={class:"stat-info"},Tl={class:"stat-value"},xl={class:"stat-card"},kl={class:"stat-info"},Il={key:0,class:"stat-change"},Al={key:1,class:"stat-trend"},zl={class:"mini-chart"},Dl={width:"60",height:"20",class:"loss-sparkline"},Nl=["points"],Pl={class:"stat-card"},Fl={class:"stat-info"},Wl={class:"stat-value accuracy"},Ll={key:0,class:"stat-trend"},Rl={class:"mini-chart"},Ul={width:"60",height:"20",class:"accuracy-sparkline"},El=["points"],ql={key:0,class:"stat-card"},Hl={class:"stat-info"},Vl={class:"stat-value accuracy"},Bl={class:"progress-bar-container"},Ol={class:"progress-bar-wrapper"},Gl={class:"progress-bar"},Ql={key:0,class:"progress-segments"},Jl={class:"progress-labels"},Xl={class:"progress-text"},jl={key:0,class:"eta-text"},Kl={key:0,class:"batch-metrics"},Yl={class:"subsection-title"},Zl={key:0,class:"live-pulse"},tr={class:"metrics-grid"},er={class:"metric-header"},sr={class:"metric-value"},ar={class:"metric-details"},nr={key:0,class:"update-indicator"},ir={class:"metric-header"},or={class:"metric-details"},lr={key:0},rr={key:1,class:"trend-sparkline"},cr={width:"40",height:"16",class:"mini-sparkline"},ur=["points"],dr={class:"metric-header"},vr={class:"metric-value accuracy"},hr={class:"metric-details"},gr={key:0},pr={key:1,class:"trend-sparkline"},mr={width:"40",height:"16",class:"mini-sparkline"},fr=["points"],_r={class:"metric-card"},yr={class:"metric-header"},br={class:"metric-value"},wr={class:"metric-details"},$r={key:1,class:"neuron-updates"},Cr={class:"neuron-grid"},Mr={class:"neuron-label"},Sr={class:"neuron-metrics"},Tr={class:"metric"},xr={class:"metric-value"},kr={class:"metric"},Ir={class:"metric-value"},xe=50,Ar=Ut({__name:"MNISTTrainingPanel",setup(h){const e=Vt(),d=be(),n=m(!1),i=m(null),u=m(0),w=m(0),C=m([]),k=m(!1);let R=null;const T=m([]),_=m([]),N=m({learningRate:.01,epochs:50,batchSize:32,speed:1}),P=K(()=>!e.isTraining),O=K(()=>e.optimizationHistory.totalSteps===0?0:e.optimizationHistory.currentStep/e.optimizationHistory.totalSteps*100),Q=K(()=>e.isTraining?n.value?"status-paused":"status-running":"status-idle"),H=K(()=>e.isTraining?n.value?"Paused":"Training Active":"Ready to Train"),A=K(()=>{if(!i.value)return"00:00";const I=n.value?u.value:Date.now()-i.value-u.value,g=Math.floor(I/1e3)%60;return`${Math.floor(I/6e4).toString().padStart(2,"0")}:${g.toString().padStart(2,"0")}`}),$=K(()=>{if(!i.value||e.optimizationHistory.currentStep===0)return null;const I=Date.now()-i.value-u.value,g=e.optimizationHistory.currentStep/e.optimizationHistory.totalSteps,v=I/g-I;return v<6e4?`${Math.ceil(v/1e3)}s`:`${Math.ceil(v/6e4)}m`}),x=K(()=>{const I=e.currentLoss,g=w.value;return I-g}),q=K(()=>{const I=x.value;return I<0?"improving":I>0?"worsening":"stable"}),tt=K(()=>e.isTraining?n.value?"Resume Training":"Training...":e.neurons.length===0&&e.trainData.length===0?"Start Training (Auto-setup)":e.neurons.length===0?"Start Training (Init Network)":e.trainData.length===0?"Start Training (Load Data)":"Start Training"),it=K(()=>{const I=e.optimizationHistory.steps;return I.length===0?"0.0000":I[I.length-1].loss.toFixed(4)}),at=K(()=>{const I=e.optimizationHistory.steps;return I.length===0?"0.0%":`${I[I.length-1].trainAccuracy.toFixed(1)}%`}),dt=K(()=>{if(T.value.length<2)return"";const I=Math.max(...T.value),g=Math.min(...T.value),v=I-g||1;return T.value.map((p,z)=>{const S=z/(T.value.length-1)*60,o=20-(p-g)/v*20;return`${S},${o}`}).join(" ")}),ot=K(()=>{if(_.value.length<2)return"";const I=Math.max(..._.value),g=Math.min(..._.value),v=I-g||1;return _.value.map((p,z)=>{const S=z/(_.value.length-1)*60,o=20-(p-g)/v*20;return`${S},${o}`}).join(" ")});async function Tt(){if(console.log("🚀 Start Training clicked"),console.log("API Connected:",e.apiConnected),console.log("Use API Compute:",e.useApiCompute),console.log("Can train?",P.value),console.log("Neurons count:",e.neurons.length),console.log("Train data count:",e.trainData.length),console.log("Filtered train data count:",e.filteredTrainData.length),!e.apiConnected&&e.useApiCompute){console.log("Attempting to connect to API..."),d.addNotification({message:"Connecting to API...",type:"info"});try{await e.initializeApiConnection(),e.apiConnected?d.addNotification({message:"Successfully connected to API!",type:"success"}):d.addNotification({message:"API unavailable, using local computation",type:"warning"})}catch(I){console.error("Failed to connect to API:",I),d.addNotification({message:"API connection failed, using local computation",type:"warning"})}}if(e.neurons.length===0){console.log("No neurons found, initializing classifier..."),d.addNotification({message:"Initializing neural network...",type:"info"});try{await e.initializeClassifier(),d.addNotification({message:"Neural network initialized!",type:"success"})}catch(I){d.addNotification({message:`Failed to initialize classifier: ${I}`,type:"error"});return}}if(e.trainData.length===0){console.log("No training data found, loading dataset..."),d.addNotification({message:"Loading training dataset...",type:"info"});try{await e.loadDataset({train:1e3,test:200}),d.addNotification({message:`Loaded ${e.trainData.length} training samples!`,type:"success"})}catch(I){d.addNotification({message:`Failed to load dataset: ${I}`,type:"error"});return}}if(e.neurons.length===0){d.addNotification({message:"Cannot start training: failed to initialize neural network",type:"error"});return}if(e.trainData.length===0&&!e.apiConnected){d.addNotification({message:"Cannot start training: no training data available and API not connected",type:"error"});return}if(N.value.learningRate<=0){d.addNotification({message:"Learning rate must be greater than 0",type:"error"});return}if(N.value.epochs<=0){d.addNotification({message:"Number of epochs must be greater than 0",type:"error"});return}console.log("✅ Starting training with config:",N.value),console.log(`🔧 Training mode: ${e.apiConnected&&e.useApiCompute?"API (JAX)":"Local (JS)"}`),e.updateOptimizationConfig(N.value),i.value=Date.now(),n.value=!1,T.value=[],_.value=[],w.value=0,d.addNotification({message:`Training started with ${e.apiConnected&&e.useApiCompute?"JAX API acceleration":"local computation"}`,type:"success"});try{await e.runTraining(),d.addNotification({message:"Training completed successfully!",type:"success"}),await e.updateAccuracyMetrics()}catch(I){console.error("Training error:",I),d.addNotification({message:`Training failed: ${I}`,type:"error"})}finally{i.value=null,n.value=!1}}function ht(){e.stopTraining(),d.addNotification({message:"Training stopped",type:"info"})}function lt(){e.clearHistory(),e.initializeClassifier(),i.value=null,u.value=0,n.value=!1,C.value=[],T.value=[],_.value=[],w.value=0,d.addNotification({message:"Training reset and neurons reinitialized",type:"info"})}function vt(){e.updateOptimizationConfig({speed:N.value.speed})}function $t(){n.value?(n.value=!1,e.resumeTraining(),i.value&&(u.value+=Date.now()-(u.value>0?u.value:i.value)),d.addNotification({message:"Training resumed",type:"info"})):(n.value=!0,e.pauseTraining(),u.value=Date.now(),d.addNotification({message:"Training paused",type:"info"}))}function Pt(){e.clearHistory(),T.value=[],_.value=[],w.value=0,d.addNotification({message:"Training history cleared",type:"info"})}async function kt(){N.value.epochs=10,N.value.speed=5,await Tt()}function xt(I){if(I.length<2)return"";const g=Math.max(...I),v=Math.min(...I),p=g-v||1;return I.map((z,S)=>{const o=S/(I.length-1)*40,y=16-(z-v)/p*16;return`${o},${y}`}).join(" ")}function B(){if(_.value.length<2)return 0;const I=_.value[_.value.length-1],g=_.value[_.value.length-2];return I-g}function yt(I){const g=I.weights,v=g.reduce((S,o)=>S+o,0)/g.length,p=Math.min(...g),z=Math.max(...g);return`${v.toFixed(3)} (${p.toFixed(2)}→${z.toFixed(2)})`}function Ct(I){const g=Math.abs(I.weights.reduce((p,z)=>p+Math.abs(z),0)),v=C.value.includes(I.id);return Math.min(1,g/100)*(v?1:.3)}function zt(){if(_.value.length<2)return"—";const I=_.value[_.value.length-1],g=_.value[_.value.length-2];return I>g?"↗️":I<g?"↘️":"→"}function Mt(){if(_.value.length<2)return"";const I=_.value[_.value.length-1],g=_.value[_.value.length-2],v=I-g;return`${v>0?"+":""}${v.toFixed(1)}%`}function D(){if(!i.value||e.optimizationHistory.steps.length===0)return"0.0";const I=(Date.now()-i.value-u.value)/1e3;return(e.optimizationHistory.steps.length/I).toFixed(1)}function L(){i.value=Date.now(),u.value=0,n.value=!1,w.value=e.currentLoss}function rt(){i.value=null,u.value=0,n.value=!1,C.value=[]}function St(){const I=e.neurons.map(g=>g.id);console.log("🎨 Highlighting neurons:",I),C.value=I,R&&clearTimeout(R),R=setTimeout(()=>{console.log("⏰ Clearing neuron highlights"),C.value=[]},1e3)}return ut(()=>e.isTraining,I=>{I?(L(),n.value=!1):rt()}),ut(()=>e.neurons,(I,g)=>{console.log("👁️ Neurons updated:",I.length),e.isTraining&&(console.log("🔥 Highlighting updated neurons"),console.log(g),St(),w.value=e.currentLoss)},{deep:!0,immediate:!0}),ut(()=>e.currentBatch,I=>{console.log("📦 Current batch updated:",I.length),I.length>0&&e.isTraining&&St()},{immediate:!0}),ut(()=>e.optimizationHistory.steps,I=>{if(I.length>0){const g=I[I.length-1];T.value.push(g.loss),T.value.length>xe&&T.value.shift(),_.value.push(g.trainAccuracy),_.value.length>xe&&_.value.shift(),T.value.length>1&&(w.value=T.value[T.value.length-2]),k.value=!0,setTimeout(()=>{k.value=!1},1e3),console.log(`📊 Metrics updated - Loss: ${g.loss.toFixed(4)}, Accuracy: ${g.trainAccuracy.toFixed(1)}%`)}},{deep:!0,immediate:!0}),ut(N,I=>{(!e.isTraining||n.value)&&e.updateOptimizationConfig(I)},{deep:!0}),ae(()=>{R&&clearTimeout(R)}),(I,g)=>(b(),M("div",Ro,[t("div",Uo,[t("div",Eo,[t("div",{class:E(["status-dot",Q.value,{pulsing:c(e).isTraining&&!n.value}])},null,2),t("span",qo,l(H.value),1),c(e).isTraining&&!n.value?(b(),M("div",Ho,g[8]||(g[8]=[t("div",{class:"pulse-ring"},null,-1),t("span",{class:"live-text"},"LIVE",-1)]))):V("",!0)]),t("div",Vo,[i.value||u.value>0?(b(),M("div",Bo,[gt(c(le),{class:"timer-icon"}),t("span",null,l(A.value),1)])):V("",!0),t("div",{class:E(["connection-status",{connected:c(e).apiConnected,local:!c(e).apiConnected}])},[g[9]||(g[9]=t("div",{class:"connection-dot"},null,-1)),t("span",null,l(c(e).apiConnected?"JAX API":"Local CPU"),1)],2),c(e).isTraining?(b(),M("div",Oo,[g[10]||(g[10]=t("span",{class:"speed-label"},"Speed:",-1)),t("span",Go,l(D()),1)])):V("",!0)])]),t("div",Qo,[g[20]||(g[20]=t("h4",{class:"section-title"},"Training Configuration",-1)),t("div",Jo,[t("div",Xo,[g[11]||(g[11]=t("label",{class:"control-label"},[ct(" Learning Rate "),t("span",{class:"control-tooltip",title:"Higher values = faster learning but less stable"},"ⓘ")],-1)),t("div",jo,[Nt(t("input",{"onUpdate:modelValue":g[0]||(g[0]=v=>N.value.learningRate=v),type:"number",step:"0.001",min:"0.001",max:"1",class:"control-input",disabled:c(e).isTraining&&!n.value},null,8,Ko),[[Yt,N.value.learningRate,void 0,{number:!0}]]),t("div",Yo,[t("button",{onClick:g[1]||(g[1]=v=>N.value.learningRate=.001),class:"preset-btn",disabled:c(e).isTraining&&!n.value},"Slow",8,Zo),t("button",{onClick:g[2]||(g[2]=v=>N.value.learningRate=.01),class:"preset-btn",disabled:c(e).isTraining&&!n.value},"Normal",8,tl),t("button",{onClick:g[3]||(g[3]=v=>N.value.learningRate=.1),class:"preset-btn",disabled:c(e).isTraining&&!n.value},"Fast",8,el)])])]),t("div",sl,[g[12]||(g[12]=t("label",{class:"control-label"},[ct(" Epochs "),t("span",{class:"control-tooltip",title:"Number of complete passes through the dataset"},"ⓘ")],-1)),Nt(t("input",{"onUpdate:modelValue":g[4]||(g[4]=v=>N.value.epochs=v),type:"number",min:"1",max:"1000",class:"control-input",disabled:c(e).isTraining&&!n.value},null,8,al),[[Yt,N.value.epochs,void 0,{number:!0}]])]),t("div",nl,[g[13]||(g[13]=t("label",{class:"control-label"},[ct(" Batch Size "),t("span",{class:"control-tooltip",title:"Number of samples processed together"},"ⓘ")],-1)),t("div",il,[Nt(t("input",{"onUpdate:modelValue":g[5]||(g[5]=v=>N.value.batchSize=v),type:"number",min:"1",max:"256",class:"control-input",disabled:c(e).isTraining&&!n.value},null,8,ol),[[Yt,N.value.batchSize,void 0,{number:!0}]]),Nt(t("input",{"onUpdate:modelValue":g[6]||(g[6]=v=>N.value.batchSize=v),type:"range",min:"1",max:"256",class:"batch-slider",disabled:c(e).isTraining&&!n.value},null,8,ll),[[Yt,N.value.batchSize,void 0,{number:!0}]])])]),t("div",rl,[g[15]||(g[15]=t("label",{class:"control-label"},[ct(" Animation Speed "),t("span",{class:"control-tooltip",title:"Controls visualization update rate"},"ⓘ")],-1)),t("div",cl,[Nt(t("input",{"onUpdate:modelValue":g[7]||(g[7]=v=>N.value.speed=v),type:"range",step:"0.1",min:"0.1",max:"10",class:"speed-slider",onInput:vt},null,544),[[Yt,N.value.speed,void 0,{number:!0}]]),t("div",ul,[t("span",dl,l(N.value.speed.toFixed(1))+"x",1),g[14]||(g[14]=t("div",{class:"speed-labels"},[t("span",null,"Slow"),t("span",null,"Normal"),t("span",null,"Fast")],-1))])])])]),t("div",vl,[t("div",hl,[t("button",{onClick:Tt,disabled:!P.value||c(e).isTraining&&!n.value,class:"action-btn primary large"},[gt(c(fe),{class:"btn-icon"}),ct(" "+l(tt.value),1)],8,gl),t("button",{onClick:$t,disabled:!c(e).isTraining,class:"action-btn secondary"},[(b(),Lt(ye(n.value?c(ze):c(De)),{class:"btn-icon"})),ct(" "+l(n.value?"Resume":"Pause"),1)],8,pl),t("button",{onClick:ht,disabled:!c(e).isTraining,class:"action-btn danger"},[gt(c(Ne),{class:"btn-icon"}),g[16]||(g[16]=ct(" Stop "))],8,ml)]),t("div",fl,[t("button",{onClick:lt,disabled:c(e).isTraining&&!n.value,class:"action-btn outline"},[gt(c(we),{class:"btn-icon"}),g[17]||(g[17]=ct(" Reset All "))],8,_l),t("button",{onClick:Pt,disabled:c(e).isTraining&&!n.value,class:"action-btn outline"},[gt(c(Pe),{class:"btn-icon"}),g[18]||(g[18]=ct(" Clear History "))],8,yl),t("button",{onClick:kt,disabled:!P.value||c(e).isTraining,class:"action-btn outline quick-train"},[gt(c(le),{class:"btn-icon"}),g[19]||(g[19]=ct(" Quick Train (10 epochs) "))],8,bl)])])]),c(e).optimizationHistory.steps.length>0?(b(),M("div",wl,[g[37]||(g[37]=t("h4",{class:"section-title"},"Real-time Training Progress",-1)),t("div",$l,[t("div",Cl,[t("div",Ml,[g[22]||(g[22]=t("div",{class:"stat-icon"},"📈",-1)),t("div",Sl,[g[21]||(g[21]=t("span",{class:"stat-label"},"Epoch",-1)),t("span",Tl,l(c(e).optimizationHistory.currentStep)+" / "+l(c(e).optimizationHistory.totalSteps),1)])]),t("div",xl,[g[24]||(g[24]=t("div",{class:"stat-icon"},"📉",-1)),t("div",kl,[g[23]||(g[23]=t("span",{class:"stat-label"},"Loss",-1)),t("span",{class:E(["stat-value",q.value])},l(it.value),3),x.value!==0?(b(),M("span",Il,l(x.value>0?"+":"")+l(x.value.toFixed(4)),1)):V("",!0),T.value.length>1?(b(),M("div",Al,[t("div",zl,[(b(),M("svg",Dl,[t("polyline",{points:dt.value,fill:"none",stroke:"rgb(var(--color-error))","stroke-width":"1.5"},null,8,Nl)]))])])):V("",!0)])]),t("div",Pl,[g[26]||(g[26]=t("div",{class:"stat-icon"},"🎯",-1)),t("div",Fl,[g[25]||(g[25]=t("span",{class:"stat-label"},"Train Accuracy",-1)),t("span",Wl,l(at.value),1),_.value.length>1?(b(),M("div",Ll,[t("div",Rl,[(b(),M("svg",Ul,[t("polyline",{points:ot.value,fill:"none",stroke:"rgb(var(--color-success))","stroke-width":"1.5"},null,8,El)]))])])):V("",!0)])]),c(e).testAccuracy>0?(b(),M("div",ql,[g[28]||(g[28]=t("div",{class:"stat-icon"},"✅",-1)),t("div",Hl,[g[27]||(g[27]=t("span",{class:"stat-label"},"Test Accuracy",-1)),t("span",Vl,l(c(e).testAccuracy.toFixed(1))+"%",1)])])):V("",!0)]),t("div",Bl,[t("div",Ol,[t("div",Gl,[t("div",{class:"progress-fill",style:At({width:`${O.value}%`})},null,4),c(e).optimizationHistory.totalSteps>0?(b(),M("div",Ql,[(b(!0),M(_t,null,wt(Math.min(c(e).optimizationHistory.totalSteps,20),v=>(b(),M("div",{key:v,class:E(["progress-segment",{completed:v<=c(e).optimizationHistory.currentStep}])},null,2))),128))])):V("",!0)]),t("div",Jl,[t("span",Xl,l(O.value.toFixed(1))+"%",1),$.value?(b(),M("span",jl,"ETA: "+l($.value),1)):V("",!0)])])])]),c(e).isTraining&&c(e).optimizationHistory.steps.length>0?(b(),M("div",Kl,[t("h5",Yl,[g[29]||(g[29]=ct(" Live Batch Metrics ")),c(e).isTraining&&!n.value?(b(),M("div",Zl)):V("",!0)]),t("div",tr,[t("div",{class:E(["metric-card",{updating:k.value}])},[t("div",er,[g[30]||(g[30]=t("span",{class:"metric-title"},"Current Batch",-1)),t("span",sr,l(c(e).currentBatch.length)+" samples",1)]),t("div",ar,[t("span",null,"Step "+l(c(e).optimizationHistory.steps.length),1),k.value?(b(),M("div",nr,"📊")):V("",!0)])],2),t("div",{class:E(["metric-card",{improving:x.value<0,degrading:x.value>0}])},[t("div",ir,[g[31]||(g[31]=t("span",{class:"metric-title"},"Loss Trend",-1)),t("span",{class:E(["metric-value",q.value])},l(T.value.length>1?x.value>0?"↗️":"↘️":"—"),3)]),t("div",or,[T.value.length>1?(b(),M("span",lr,l(Math.abs(x.value*100).toFixed(2))+"% change ",1)):V("",!0),T.value.length>5?(b(),M("div",rr,[(b(),M("svg",cr,[t("polyline",{points:xt(T.value.slice(-10)),fill:"none",stroke:"currentColor","stroke-width":"1"},null,8,ur)]))])):V("",!0)])],2),t("div",{class:E(["metric-card",{improving:B()>0,degrading:B()<0}])},[t("div",dr,[g[32]||(g[32]=t("span",{class:"metric-title"},"Accuracy Trend",-1)),t("span",vr,l(_.value.length>1?zt():"—"),1)]),t("div",hr,[_.value.length>1?(b(),M("span",gr,l(Mt()),1)):V("",!0),_.value.length>5?(b(),M("div",pr,[(b(),M("svg",mr,[t("polyline",{points:xt(_.value.slice(-10)),fill:"none",stroke:"currentColor","stroke-width":"1"},null,8,fr)]))])):V("",!0)])],2),t("div",_r,[t("div",yr,[g[33]||(g[33]=t("span",{class:"metric-title"},"Training Speed",-1)),t("span",br,l(D()),1)]),t("div",wr,[t("span",null,l(c(e).apiConnected?"JAX accelerated":"CPU compute"),1),t("div",{class:E(["performance-indicator",{high:c(e).apiConnected,standard:!c(e).apiConnected}])},l(c(e).apiConnected?"🚀":"💻"),3)])])])])):V("",!0),c(e).currentBatch.length>0?(b(),M("div",$r,[g[36]||(g[36]=t("h5",{class:"subsection-title"},"Live Neuron Updates",-1)),t("div",Cr,[(b(!0),M(_t,null,wt(c(e).neurons,(v,p)=>(b(),M("div",{key:v.id,class:E(["neuron-update-card",{active:C.value.includes(v.id)}])},[t("div",Mr,l(v.label||`Neuron ${p}`),1),t("div",Sr,[t("div",Tr,[g[34]||(g[34]=t("span",{class:"metric-label"},"Weights:",-1)),t("span",xr,l(yt(v)),1)]),t("div",kr,[g[35]||(g[35]=t("span",{class:"metric-label"},"Bias:",-1)),t("span",Ir,l(v.bias.toFixed(3)),1)])]),t("div",{class:"neuron-activity-indicator",style:At({backgroundColor:v.color,opacity:Ct(v)})},null,4)],2))),128))])])):V("",!0)])):V("",!0)]))}});const zr=Et(Ar,[["__scopeId","data-v-0c69ed73"]]),Dr={class:"mnist-metrics-panel"},Nr={class:"metrics-header"},Pr={class:"header-section"},Fr={class:"live-status-container"},Wr={class:"status-text"},Lr={key:0,class:"last-update"},Rr={key:0,class:"live-training-indicator"},Ur={class:"live-stats"},Er={class:"performance-icon"},qr={class:"performance-text"},Hr={class:"header-controls"},Vr=["disabled"],Br={class:"auto-icon"},Or={class:"view-selector"},Gr=["onClick","title"],Qr={class:"metrics-content"},Jr={key:0,class:"overview-section"},Xr={class:"metrics-grid"},jr={class:"metric-card training-progress"},Kr={class:"card-header"},Yr={class:"progress-content"},Zr={class:"progress-stats"},tc={class:"stat-item"},ec={class:"stat-value"},sc={class:"stat-item"},ac={class:"stat-value loss"},nc={class:"stat-item"},ic={class:"stat-value"},oc={class:"progress-bar-container"},lc={class:"progress-bar"},rc={class:"progress-text"},cc={class:"metric-card accuracy-metrics"},uc={class:"card-header"},dc={class:"accuracy-content"},vc={class:"accuracy-item"},hc={class:"accuracy-value train"},gc={class:"accuracy-bar"},pc={class:"accuracy-item"},mc={class:"accuracy-value test"},fc={class:"accuracy-bar"},_c={class:"accuracy-gap"},yc={class:"metric-card weight-stats"},bc={class:"weight-content"},wc={class:"weight-summary"},$c={class:"summary-item"},Cc={class:"summary-value"},Mc={class:"summary-item"},Sc={class:"summary-value"},Tc={class:"summary-item"},xc={class:"summary-value"},kc={class:"weight-distribution"},Ic={class:"metric-card dataset-info"},Ac={class:"card-header"},zc={class:"dataset-status"},Dc={class:"dataset-content"},Nc={class:"dataset-stats"},Pc={class:"dataset-item"},Fc={class:"dataset-value"},Wc={class:"dataset-item"},Lc={class:"dataset-value"},Rc={class:"dataset-item"},Uc={class:"dataset-value"},Ec={class:"dataset-item"},qc={class:"dataset-value"},Hc={class:"class-distribution"},Vc={class:"class-chips"},Bc={key:1,class:"loss-section"},Oc={class:"chart-container"},Gc={class:"chart-header"},Qc={class:"chart-controls"},Jc={class:"loss-stats"},Xc={class:"loss-stat"},jc={class:"stat-value"},Kc={class:"loss-stat"},Yc={class:"stat-value"},Zc={class:"loss-stat"},tu={key:2,class:"weights-section"},eu={class:"weights-analysis"},su={class:"analysis-header"},au={class:"analysis-controls"},nu={class:"neuron-weights-grid"},iu={class:"neuron-card-header"},ou={class:"neuron-label"},lu={class:"neuron-metric"},ru={class:"weight-mini-chart"},cu={class:"neuron-stats"},uu={class:"mini-stat"},du={class:"mini-value"},vu={class:"mini-stat"},hu={class:"mini-value"},gu={class:"mini-stat"},pu={class:"mini-value"},mu={key:3,class:"api-section"},fu={class:"api-metrics"},_u={class:"api-header"},yu={class:"api-stats-grid"},bu={class:"api-stat-card"},wu={class:"api-stat-value"},$u={class:"api-stat-card"},Cu={class:"api-stat-value"},Mu={class:"api-stat-card"},Su={class:"api-stat-value"},Tu={class:"api-stat-card"},xu={class:"api-stat-value"},ku={class:"api-operations"},Iu={class:"operations-list"},Au={class:"operation-type"},zu={class:"operation-time"},Du={class:"operation-status"},Nu=Ut({__name:"MNISTMetricsPanel",setup(h){const e=Vt(),d=m("overview"),n=m(!0),i=m(!1),u=m(!1),w=m(null),C=m("recent"),k=m("norm"),R=m(null),T=m(null),_=m({}),N=m(0),P=m(0),O=m(100),Q=m(null),H=m([]),A=m(null),$=m([]),x=m(0),q=m(0),tt=m(0),it=m(0),at=m(0),dt=m(0),ot=m([]),Tt=m(Date.now()),ht=[{id:"overview",label:"Overview",description:"General training metrics"},{id:"loss",label:"Loss",description:"Loss history and trends"},{id:"weights",label:"Weights",description:"Weight analysis by neuron"},{id:"api",label:"API",description:"API performance metrics"}],lt=K(()=>!e.isTraining||e.optimizationHistory.totalSteps===0?0:e.optimizationHistory.currentStep/e.optimizationHistory.totalSteps*100),vt=K(()=>{const S=e.trainAccuracy-dt.value;return S>1?"up":S<-1?"down":"stable"}),$t=K(()=>Math.max(0,e.trainAccuracy-e.testAccuracy)),Pt=K(()=>$.value.length===0?0:Math.min(...$.value)),kt=K(()=>{if($.value.length<10)return"stable";const S=$.value.slice(-10),o=$.value.slice(-20,-10);if(o.length===0)return"stable";const y=S.reduce((G,et)=>G+et,0)/S.length,W=o.reduce((G,et)=>G+et,0)/o.length;return y<W*.95?"decreasing":y>W*1.05?"increasing":"stable"});function xt(S){const y=Date.now()-S;return y<1e3?"now":y<6e4?`${Math.floor(y/1e3)}s ago`:y<36e5?`${Math.floor(y/6e4)}m ago`:`${Math.floor(y/36e5)}h ago`}function B(S,o=2){return S.toFixed(o)}function yt(S){const o=["#ff6b6b","#4ecdc4","#45b7d1","#96ceb4","#feca57","#ff9ff3","#54a0ff","#5f27cd","#00d2d3","#ff9f43"];return o[S%o.length]}async function Ct(){if(!i.value){i.value=!0,u.value=!1;try{if(e.apiConnected){const S=Date.now(),o=await j.getTrainingMetrics();x.value=o.current_epoch,tt.value=o.gradient_norm,await Mt();const y=Date.now()-S;N.value=y,H.value.unshift({type:"Metrics Refresh",timestamp:Date.now(),success:!0}),H.value.length>10&&(H.value=H.value.slice(0,10))}w.value=Date.now()}catch(S){console.error("Failed to refresh metrics:",S),u.value=!0,H.value.unshift({type:"Metrics Refresh",timestamp:Date.now(),success:!1})}finally{i.value=!1}}}function zt(){n.value=!n.value}async function Mt(){try{if(e.apiConnected){const S=await j.getModelWeights();it.value=S.weights.reduce((y,W)=>y+W.length,0)+S.biases.length;const o=S.weights.flat();q.value=Math.sqrt(o.reduce((y,W)=>y+W*W,0)),D(o)}else{const S=e.neurons.flatMap(o=>o.weights);it.value=S.length+e.neurons.length,q.value=Math.sqrt(S.reduce((o,y)=>o+y*y,0)),D(S)}}catch(S){console.warn("Failed to refresh weight stats:",S)}}function D(S){const o=T.value;if(!o)return;const y=o.getContext("2d");if(!y)return;y.clearRect(0,0,o.width,o.height);const W=20,G=Math.min(...S),ft=(Math.max(...S)-G)/W,Y=new Array(W).fill(0);for(const nt of S){const pt=Math.min(W-1,Math.floor((nt-G)/ft));Y[pt]++}const bt=Math.max(...Y),st=o.width/W;y.fillStyle=yt(0);for(let nt=0;nt<W;nt++){const pt=Y[nt]/bt*o.height;y.fillRect(nt*st,o.height-pt,st-1,pt)}}function L(){$.value=[],rt()}function rt(){const S=R.value;if(!S||$.value.length<2)return;const o=S.getContext("2d");if(!o)return;o.clearRect(0,0,S.width,S.height);let y=$.value;switch(C.value){case"recent":y=y.slice(-50);break;case"last100":y=y.slice(-100);break}if(y.length<2)return;const W=40,G=S.width-2*W,et=S.height-2*W,ft=Math.min(...y),Y=Math.max(...y),bt=Y-ft||1;o.strokeStyle="rgba(255, 255, 255, 0.1)",o.lineWidth=1;for(let st=0;st<=5;st++){const nt=W+et/5*st;o.beginPath(),o.moveTo(W,nt),o.lineTo(W+G,nt),o.stroke()}for(let st=0;st<=10;st++){const nt=W+G/10*st;o.beginPath(),o.moveTo(nt,W),o.lineTo(nt,W+et),o.stroke()}o.strokeStyle="#ff6b6b",o.lineWidth=2,o.beginPath(),y.forEach((st,nt)=>{const pt=W+G/(y.length-1)*nt,Dt=W+et-(st-ft)/bt*et;nt===0?o.moveTo(pt,Dt):o.lineTo(pt,Dt)}),o.stroke(),o.fillStyle="rgba(255, 255, 255, 0.7)",o.font="10px Arial",o.textAlign="right";for(let st=0;st<=5;st++){const nt=Y-bt/5*st,pt=W+et/5*st+3;o.fillText(nt.toFixed(3),W-5,pt)}}function St(S){return Math.sqrt(S.weights.reduce((o,y)=>o+y*y,0))}function I(S){return S.weights.reduce((o,y)=>o+y,0)/S.weights.length}function g(S){const o=I(S),y=S.weights.reduce((W,G)=>W+Math.pow(G-o,2),0)/S.weights.length;return Math.sqrt(y)}function v(S,o){switch(o){case"norm":return St(S).toFixed(3);case"mean":return I(S).toFixed(3);case"std":return g(S).toFixed(3);case"range":const y=Math.min(...S.weights);return(Math.max(...S.weights)-y).toFixed(3);default:return"0.000"}}function p(S){const o=_.value[S.id];if(!o)return;const y=o.getContext("2d");if(!y)return;y.clearRect(0,0,o.width,o.height);const W=S.weights,G=10,et=Math.min(...W),Y=(Math.max(...W)-et)/G,bt=new Array(G).fill(0);for(const pt of W){const Dt=Math.min(G-1,Math.floor((pt-et)/Y));bt[Dt]++}const st=Math.max(...bt),nt=o.width/G;y.fillStyle=yt(S.id);for(let pt=0;pt<G;pt++){const Dt=bt[pt]/st*o.height;y.fillRect(pt*nt,o.height-Dt,nt-1,Dt)}}ut(()=>e.currentLoss,S=>{e.isTraining&&($.value.push(S),$.value.length>500&&($.value=$.value.slice(-500)),Jt(()=>{rt()}))}),ut(()=>e.isTraining,S=>{S&&(A.value=Date.now())}),ut(()=>e.neurons,()=>{Mt(),Jt(()=>{for(const S of e.neurons)p(S)})},{deep:!0}),ut(()=>d.value,()=>{Jt(()=>{if(d.value==="loss")rt();else if(d.value==="weights")for(const S of e.neurons)p(S)})}),ut(()=>e.optimizationHistory.steps.length,()=>{const S=Date.now();if(ot.value.push(S),ot.value.length>10&&(ot.value=ot.value.slice(-10)),ot.value.length>=2){const o=S-ot.value[0],y=ot.value.length-1;at.value=y/(o/1e3)||0}Tt.value=S});let z=null;return Xt(()=>{Ct(),Mt(),n.value&&(z=setInterval(()=>{n.value&&!i.value&&Ct()},5e3))}),ae(()=>{z&&clearInterval(z)}),(S,o)=>(b(),M("div",Dr,[t("div",Nr,[t("div",Pr,[o[4]||(o[4]=t("h3",null,"Training Metrics",-1)),t("div",Fr,[t("div",{class:E(["api-status",{connected:c(e).apiConnected,syncing:i.value,error:u.value}])},[t("div",{class:E(["status-dot",{pulsing:c(e).isTraining}])},null,2),t("span",Wr,l(c(e).apiConnected?"API Connected":"Local Mode"),1),w.value?(b(),M("span",Lr," Updated "+l(xt(w.value)),1)):V("",!0)],2),c(e).isTraining?(b(),M("div",Rr,[o[2]||(o[2]=t("div",{class:"live-pulse"},null,-1)),o[3]||(o[3]=t("span",{class:"live-text"},"LIVE",-1)),t("span",Ur," Epoch "+l(x.value)+" • "+l(B(at.value,1))+"/s ",1)])):V("",!0),t("div",{class:E(["performance-indicator",{high:c(e).apiConnected&&c(e).useApiCompute,medium:c(e).apiConnected&&!c(e).useApiCompute,low:!c(e).apiConnected}])},[t("div",Er,l(c(e).apiConnected?c(e).useApiCompute?"🚀":"⚡":"💻"),1),t("span",qr,l(c(e).apiConnected?c(e).useApiCompute?"JAX GPU":"JAX CPU":"Local JS"),1)],2)])]),t("div",Hr,[t("button",{onClick:Ct,disabled:i.value,class:"refresh-btn",title:"Refresh metrics from API"},[t("div",{class:E(["refresh-icon",{spinning:i.value}])},"🔄",2)],8,Vr),t("button",{onClick:zt,class:E(["auto-refresh-btn",{active:n.value}]),title:"Toggle automatic refresh"},[t("div",Br,l(n.value?"🔄":"⏸️"),1)],2),t("div",Or,[(b(),M(_t,null,wt(ht,y=>t("button",{key:y.id,onClick:W=>d.value=y.id,class:E(["view-btn",{active:d.value===y.id}]),title:y.description},l(y.label),11,Gr)),64))])])]),t("div",Qr,[d.value==="overview"?(b(),M("div",Jr,[t("div",Xr,[t("div",jr,[t("div",Kr,[o[5]||(o[5]=t("h4",null,"Training Progress",-1)),t("div",{class:E(["training-status",{active:c(e).isTraining}])},l(c(e).isTraining?"Training":"Idle"),3)]),t("div",Yr,[t("div",Zr,[t("div",tc,[o[6]||(o[6]=t("span",{class:"stat-label"},"Epoch:",-1)),t("span",ec,l(x.value),1)]),t("div",sc,[o[7]||(o[7]=t("span",{class:"stat-label"},"Loss:",-1)),t("span",ac,l(B(c(e).currentLoss,4)),1)]),t("div",nc,[o[8]||(o[8]=t("span",{class:"stat-label"},"Learning Rate:",-1)),t("span",ic,l(c(e).optimizationHistory.config.learningRate),1)])]),t("div",oc,[o[9]||(o[9]=t("div",{class:"progress-label"},"Training Progress",-1)),t("div",lc,[t("div",{class:"progress-fill",style:At({width:`${lt.value}%`})},null,4)]),t("div",rc,l(lt.value.toFixed(1))+"%",1)])])]),t("div",cc,[t("div",uc,[o[10]||(o[10]=t("h4",null,"Model Accuracy",-1)),t("div",{class:E(["accuracy-trend",vt.value])},l(vt.value==="up"?"📈":vt.value==="down"?"📉":"➡️"),3)]),t("div",dc,[t("div",vc,[o[11]||(o[11]=t("div",{class:"accuracy-label"},"Train Accuracy",-1)),t("div",hc,l(B(c(e).trainAccuracy,1))+"%",1),t("div",gc,[t("div",{class:"accuracy-fill train",style:At({width:`${c(e).trainAccuracy}%`})},null,4)])]),t("div",pc,[o[12]||(o[12]=t("div",{class:"accuracy-label"},"Test Accuracy",-1)),t("div",mc,l(B(c(e).testAccuracy,1))+"%",1),t("div",fc,[t("div",{class:"accuracy-fill test",style:At({width:`${c(e).testAccuracy}%`})},null,4)])]),t("div",_c,[o[13]||(o[13]=t("span",{class:"gap-label"},"Overfitting Gap:",-1)),t("span",{class:E(["gap-value",{warning:$t.value>10}])},l(B($t.value,1))+"% ",3)])])]),t("div",yc,[t("div",{class:"card-header"},[o[14]||(o[14]=t("h4",null,"Weight Statistics",-1)),t("button",{onClick:Mt,class:"mini-refresh-btn"},"🔄")]),t("div",bc,[t("div",wc,[t("div",$c,[o[15]||(o[15]=t("span",{class:"summary-label"},"Total Parameters:",-1)),t("span",Cc,l(it.value.toLocaleString()),1)]),t("div",Mc,[o[16]||(o[16]=t("span",{class:"summary-label"},"Weight Norm:",-1)),t("span",Sc,l(B(q.value,3)),1)]),t("div",Tc,[o[17]||(o[17]=t("span",{class:"summary-label"},"Gradient Norm:",-1)),t("span",xc,l(B(tt.value,3)),1)])]),t("div",kc,[t("canvas",{ref_key:"weightDistributionCanvas",ref:T,class:"distribution-canvas",width:"200",height:"80"},null,512)])])]),t("div",Ic,[t("div",Ac,[o[18]||(o[18]=t("h4",null,"Dataset Info",-1)),t("div",zc,l(c(e).selectedDataset||"Local"),1)]),t("div",Dc,[t("div",Nc,[t("div",Pc,[o[19]||(o[19]=t("span",{class:"dataset-label"},"Training Samples:",-1)),t("span",Fc,l(c(e).datasetInfo.trainSize.toLocaleString()),1)]),t("div",Wc,[o[20]||(o[20]=t("span",{class:"dataset-label"},"Test Samples:",-1)),t("span",Lc,l(c(e).datasetInfo.testSize.toLocaleString()),1)]),t("div",Rc,[o[21]||(o[21]=t("span",{class:"dataset-label"},"Active Classes:",-1)),t("span",Uc,l(c(e).activeClasses.length)+"/10",1)]),t("div",Ec,[o[22]||(o[22]=t("span",{class:"dataset-label"},"Features:",-1)),t("span",qc,l(c(e).datasetInfo.numFeatures),1)])]),t("div",Hc,[o[23]||(o[23]=t("div",{class:"class-label"},"Active Classes:",-1)),t("div",Vc,[(b(!0),M(_t,null,wt(c(e).activeClasses,y=>(b(),M("div",{key:y,class:"class-chip",style:At({backgroundColor:yt(y)})},l(y),5))),128))])])])])])])):d.value==="loss"?(b(),M("div",Bc,[t("div",Oc,[t("div",Gc,[o[25]||(o[25]=t("h4",null,"Loss History",-1)),t("div",Qc,[Nt(t("select",{"onUpdate:modelValue":o[0]||(o[0]=y=>C.value=y),class:"timeframe-select"},o[24]||(o[24]=[t("option",{value:"all"},"All Time",-1),t("option",{value:"recent"},"Recent (50 steps)",-1),t("option",{value:"last100"},"Last 100 steps",-1)]),512),[[Ht,C.value]]),t("button",{onClick:L,class:"clear-btn"},"Clear")])]),t("canvas",{ref_key:"lossChartCanvas",ref:R,class:"loss-chart",width:"800",height:"300"},null,512),t("div",Jc,[t("div",Xc,[o[26]||(o[26]=t("span",{class:"stat-label"},"Current Loss:",-1)),t("span",jc,l(B(c(e).currentLoss,4)),1)]),t("div",Kc,[o[27]||(o[27]=t("span",{class:"stat-label"},"Min Loss:",-1)),t("span",Yc,l(B(Pt.value,4)),1)]),t("div",Zc,[o[28]||(o[28]=t("span",{class:"stat-label"},"Loss Trend:",-1)),t("span",{class:E(["stat-value",kt.value])},l(kt.value==="decreasing"?"Decreasing ↓":kt.value==="increasing"?"Increasing ↑":"Stable →"),3)])])])])):d.value==="weights"?(b(),M("div",tu,[t("div",eu,[t("div",su,[o[30]||(o[30]=t("h4",null,"Weight Analysis",-1)),t("div",au,[Nt(t("select",{"onUpdate:modelValue":o[1]||(o[1]=y=>k.value=y),class:"metric-select"},o[29]||(o[29]=[t("option",{value:"norm"},"Weight Norm",-1),t("option",{value:"mean"},"Mean Weight",-1),t("option",{value:"std"},"Std Deviation",-1),t("option",{value:"range"},"Weight Range",-1)]),512),[[Ht,k.value]])])]),t("div",nu,[(b(!0),M(_t,null,wt(c(e).neurons,y=>(b(),M("div",{key:y.id,class:"neuron-weight-card"},[t("div",iu,[t("span",ou,"Class "+l(y.id),1),t("span",lu,l(v(y,k.value)),1)]),t("div",ru,[t("canvas",{ref_for:!0,ref:W=>{W&&(_.value[y.id]=W)},class:"mini-chart",width:"120",height:"60"},null,512)]),t("div",cu,[t("div",uu,[o[31]||(o[31]=t("span",{class:"mini-label"},"‖w‖:",-1)),t("span",du,l(St(y).toFixed(3)),1)]),t("div",vu,[o[32]||(o[32]=t("span",{class:"mini-label"},"μ:",-1)),t("span",hu,l(I(y).toFixed(3)),1)]),t("div",gu,[o[33]||(o[33]=t("span",{class:"mini-label"},"σ:",-1)),t("span",pu,l(g(y).toFixed(3)),1)])])]))),128))])])])):d.value==="api"?(b(),M("div",mu,[t("div",fu,[t("div",_u,[o[34]||(o[34]=t("h4",null,"API Performance",-1)),t("div",{class:E(["api-status-indicator",{connected:c(e).apiConnected}])},l(c(e).apiConnected?"Connected":"Disconnected"),3)]),t("div",yu,[t("div",bu,[o[35]||(o[35]=t("div",{class:"api-stat-label"},"Response Time",-1)),t("div",wu,l(N.value)+"ms",1)]),t("div",$u,[o[36]||(o[36]=t("div",{class:"api-stat-label"},"Requests/min",-1)),t("div",Cu,l(P.value),1)]),t("div",Mu,[o[37]||(o[37]=t("div",{class:"api-stat-label"},"Success Rate",-1)),t("div",Su,l(O.value)+"%",1)]),t("div",Tu,[o[38]||(o[38]=t("div",{class:"api-stat-label"},"Last Sync",-1)),t("div",xu,l(Q.value?xt(Q.value):"Never"),1)])]),t("div",ku,[o[39]||(o[39]=t("h5",null,"Recent Operations",-1)),t("div",Iu,[(b(!0),M(_t,null,wt(H.value,(y,W)=>(b(),M("div",{key:W,class:E(["operation-item",{success:y.success,error:!y.success}])},[t("span",Au,l(y.type),1),t("span",zu,l(xt(y.timestamp)),1),t("span",Du,l(y.success?"✓":"✗"),1)],2))),128))])])])])):V("",!0)])]))}});const Pu=Et(Nu,[["__scopeId","data-v-294e27a8"]]),Fu={class:"api-status-panel"},Wu={class:"status-header"},Lu={class:"status-text"},Ru={key:0,class:"uptime"},Uu={class:"actions"},Eu=["disabled"],qu={class:"btn-icon"},Hu={class:"metrics-grid"},Vu={class:"metric-value"},Bu={class:"metric-trend"},Ou={class:"metric-value"},Gu={class:"metric-trend"},Qu={class:"metric-card"},Ju={class:"metric-value"},Xu={class:"metric-trend"},ju={class:"metric-value"},Ku={key:0,class:"metric-trend"},Yu={class:"training-indicator"},Zu={key:0,class:"training-metrics"},td={class:"training-grid"},ed={class:"training-metric"},sd={class:"change"},ad={class:"training-metric"},nd={class:"value"},id={class:"training-metric"},od={class:"value"},ld={class:"training-metric"},rd={class:"value"},cd={class:"operations-section"},ud={class:"operations-list"},dd={class:"operation-info"},vd={class:"operation-name"},hd={class:"operation-time"},gd={class:"operation-status"},pd={class:"status-icon"},md={class:"duration"},fd={class:"model-state-section"},_d={class:"state-grid"},yd={class:"state-item"},bd={class:"state-item"},wd={class:"state-item"},$d={class:"state-item"},Cd={class:"state-value"},Md={key:1,class:"system-metrics"},Sd={class:"resource-bars"},Td={class:"resource-bar"},xd={class:"progress-bar"},kd={class:"resource-value"},Id={class:"resource-bar"},Ad={class:"progress-bar"},zd={class:"resource-value"},Dd=Ut({__name:"MNISTApiStatus",setup(h){const e=Vt(),d=m(!1),n=m(!1),i=m(!1),u=m(!0),w=m(null),C=m(0),k=m(0),R=m(0),T=m(100),_=m(0),N=m(0),P=m(0),O=m(0),Q=m(.01),H=m(0),A=m(0),$=m(0),x=m([]),q=m(null),tt=m(!1),it=m(!1),at=K(()=>({connected:e.apiConnected,connecting:d.value,disconnected:!e.apiConnected&&!d.value,error:n.value})),dt=K(()=>d.value?"Connecting...":e.apiConnected?"Connected":n.value?"Connection Error":"Disconnected"),ot=K(()=>{const D=e.currentLoss-A.value;return{improving:D<-.001,degrading:D>.001,stable:Math.abs(D)<=.001}}),Tt=K(()=>{const D=e.trainAccuracy-$.value;return{improving:D>.1,degrading:D<-.1,stable:Math.abs(D)<=.1}});function ht(D){if(D<60)return`${D}s`;if(D<3600)return`${Math.floor(D/60)}m ${D%60}s`;const L=Math.floor(D/3600),rt=Math.floor(D%3600/60);return`${L}h ${rt}m`}function lt(D){return{"trend-up":D>0,"trend-down":D<0,"trend-stable":D===0}}function vt(D){return D===0?"→":D>0?`↗ +${D.toFixed(1)}`:`↘ ${D.toFixed(1)}`}function $t(){const D=e.currentLoss-A.value;return Math.abs(D)<1e-4?"":D>0?`↗ +${D.toFixed(4)}`:`↘ ${D.toFixed(4)}`}function Pt(){const D=e.trainAccuracy-$.value;return Math.abs(D)<.1?"":D>0?`↗ +${D.toFixed(1)}%`:`↘ ${D.toFixed(1)}%`}function kt(D){return Date.now()-D<5e3}function xt(D){const L=Date.now()-D;return L<1e3?"now":L<6e4?`${Math.floor(L/1e3)}s ago`:L<36e5?`${Math.floor(L/6e4)}m ago`:`${Math.floor(L/36e5)}h ago`}async function B(){i.value=!0;const D=Date.now();try{await j.healthCheck();const L=Date.now()-D;Ct("Health Check",!0,L),k.value=L,n.value=!1}catch(L){const rt=Date.now()-D;Ct("Health Check",!1,rt),n.value=!0,console.error("Connection test failed:",L)}finally{i.value=!1}}function yt(){u.value=!u.value,console.log("Auto refresh",u.value?"enabled":"disabled")}function Ct(D,L,rt){x.value.unshift({operation:D,timestamp:Date.now(),success:L,duration:rt}),x.value.length>10&&(x.value=x.value.slice(0,10));const St=x.value.slice(0,20),I=St.filter(g=>g.success).length;T.value=I/St.length*100}ut(()=>e.apiConnected,D=>{D?(w.value=Date.now(),n.value=!1):w.value=null}),ut(()=>e.currentLoss,D=>{A.value=D}),ut(()=>e.trainAccuracy,D=>{$.value=D});let zt=null,Mt=null;return Xt(()=>{zt=setInterval(()=>{w.value&&(C.value=Math.floor((Date.now()-w.value)/1e3))},1e3),u.value&&(Mt=setInterval(async()=>{if(e.apiConnected&&u.value)try{tt.value=e.neurons.length>0&&e.neurons[0].weights.length>0,it.value=!!e.selectedDataset}catch(D){console.warn("Failed to update metrics:",D)}},2e3)),e.apiConnected&&B()}),ae(()=>{zt&&clearInterval(zt),Mt&&clearInterval(Mt)}),(D,L)=>(b(),M("div",Fu,[t("div",Wu,[t("div",{class:E(["connection-indicator",at.value])},[t("div",{class:E(["status-dot",{pulsing:c(e).apiConnected&&d.value,error:!c(e).apiConnected&&n.value}])},null,2),t("span",Lu,l(dt.value),1),c(e).apiConnected?(b(),M("span",Ru,l(ht(C.value)),1)):V("",!0)],2),t("div",Uu,[t("button",{onClick:B,disabled:i.value,class:E(["test-btn",{testing:i.value}])},[t("div",{class:E(["btn-icon",{spinning:i.value}])},"🔄",2),ct(" "+l(i.value?"Testing...":"Test"),1)],10,Eu),t("button",{onClick:yt,class:E(["auto-refresh-btn",{active:u.value}])},[t("div",qu,l(u.value?"⏸️":"▶️"),1),L[0]||(L[0]=ct(" Auto "))],2)])]),t("div",Hu,[t("div",{class:E(["metric-card",{warning:k.value>1e3,error:k.value>5e3}])},[L[1]||(L[1]=t("div",{class:"metric-label"},"Response Time",-1)),t("div",Vu,l(k.value)+"ms",1),t("div",Bu,[t("span",{class:E(lt(R.value))},l(vt(R.value)),3)])],2),t("div",{class:E(["metric-card",{warning:T.value<95,error:T.value<80}])},[L[2]||(L[2]=t("div",{class:"metric-label"},"Success Rate",-1)),t("div",Ou,l(T.value.toFixed(1))+"%",1),t("div",Gu,[t("span",{class:E(lt(_.value))},l(vt(_.value)),3)])],2),t("div",Qu,[L[3]||(L[3]=t("div",{class:"metric-label"},"Requests/min",-1)),t("div",Ju,l(N.value),1),t("div",Xu,[t("span",{class:E(lt(P.value))},l(vt(P.value)),3)])]),t("div",{class:E(["metric-card",{active:c(e).isTraining}])},[L[4]||(L[4]=t("div",{class:"metric-label"},"Training Status",-1)),t("div",ju,l(c(e).isTraining?"Active":"Idle"),1),c(e).isTraining?(b(),M("div",Ku,[t("span",Yu,"Epoch "+l(O.value),1)])):V("",!0)],2)]),c(e).isTraining?(b(),M("div",Zu,[L[9]||(L[9]=t("h4",null,"Live Training Metrics",-1)),t("div",td,[t("div",ed,[L[5]||(L[5]=t("span",{class:"label"},"Current Loss:",-1)),t("span",{class:E(["value",ot.value])},l(c(e).currentLoss.toFixed(4)),3),t("span",sd,l($t()),1)]),t("div",ad,[L[6]||(L[6]=t("span",{class:"label"},"Train Accuracy:",-1)),t("span",nd,l(c(e).trainAccuracy.toFixed(1))+"%",1),t("span",{class:E(["change",Tt.value])},l(Pt()),3)]),t("div",id,[L[7]||(L[7]=t("span",{class:"label"},"Learning Rate:",-1)),t("span",od,l(Q.value.toFixed(4)),1)]),t("div",ld,[L[8]||(L[8]=t("span",{class:"label"},"Gradient Norm:",-1)),t("span",rd,l(H.value.toFixed(6)),1)])])])):V("",!0),t("div",cd,[L[10]||(L[10]=t("h4",null,"Recent Operations",-1)),t("div",ud,[(b(!0),M(_t,null,wt(x.value,(rt,St)=>(b(),M("div",{key:St,class:E(["operation-item",{success:rt.success,error:!rt.success,recent:kt(rt.timestamp)}])},[t("div",dd,[t("span",vd,l(rt.operation),1),t("span",hd,l(xt(rt.timestamp)),1)]),t("div",gd,[t("span",pd,l(rt.success?"✅":"❌"),1),t("span",md,l(rt.duration)+"ms",1)])],2))),128))])]),t("div",fd,[L[15]||(L[15]=t("h4",null,"Model State",-1)),t("div",_d,[t("div",yd,[L[11]||(L[11]=t("span",{class:"state-label"},"Weights Initialized:",-1)),t("span",{class:E(["state-value",{active:tt.value}])},l(tt.value?"Yes":"No"),3)]),t("div",bd,[L[12]||(L[12]=t("span",{class:"state-label"},"Ternary Mode:",-1)),t("span",{class:E(["state-value",{active:c(e).useTernaryWeights}])},l(c(e).useTernaryWeights?"Enabled":"Disabled"),3)]),t("div",wd,[L[13]||(L[13]=t("span",{class:"state-label"},"Dataset Loaded:",-1)),t("span",{class:E(["state-value",{active:it.value}])},l(c(e).selectedDataset||"None"),3)]),t("div",$d,[L[14]||(L[14]=t("span",{class:"state-label"},"Similarity Metric:",-1)),t("span",Cd,l(c(e).similarityMetric),1)])])]),q.value?(b(),M("div",Md,[L[18]||(L[18]=t("h4",null,"System Resources",-1)),t("div",Sd,[t("div",Td,[L[16]||(L[16]=t("div",{class:"resource-label"},"CPU Usage",-1)),t("div",xd,[t("div",{class:"progress-fill",style:At({width:`${q.value.cpu}%`})},null,4)]),t("span",kd,l(q.value.cpu)+"%",1)]),t("div",Id,[L[17]||(L[17]=t("div",{class:"resource-label"},"Memory Usage",-1)),t("div",Ad,[t("div",{class:"progress-fill",style:At({width:`${q.value.memory}%`})},null,4)]),t("span",zd,l(q.value.memory)+"%",1)])])])):V("",!0)]))}});const Nd=Et(Dd,[["__scopeId","data-v-f8844232"]]),Pd={class:"min-h-screen photoshop-workspace"},Fd={class:"workspace-main"},Wd={class:"workspace-container"},Ld={class:"visualization-area"},Rd={class:"visualization-container","data-tour":"mnist-canvas"},Ud={key:0,class:"controls-toolbar-overlay"},Ed={class:"dataset-content"},qd={class:"visualization-content"},Hd={class:"network-config-content"},Vd={class:"training-content"},Bd={class:"metrics-content"},Od={class:"api-status-content"},Gd={class:"panel-controls-sidebar","data-tour":"panel-controls"},Qd={class:"sidebar-section"},Jd={class:"panel-toggles"},Xd=["onClick","title","data-tour"],jd={class:"toggle-label"},Kd={class:"sidebar-section"},Yd={class:"layout-controls"},Zd=Ut({__name:"MnistClassifier",setup(h){const e=Vt(),d=be(),n=m(null),i=Fe({dataset:!0,visualization:!0,networkConfig:!1,training:!1,metrics:!1,apiStatus:!1});Xt(async()=>{try{console.log("🚀 Initializing MNIST Classifier..."),await e.initializeApiConnection(),d.addNotification({message:e.apiConnected?"Connected to API - Real datasets available":"Using local computation - Synthetic data mode",type:e.apiConnected?"success":"info"}),console.log("✅ MNIST Classifier initialized successfully")}catch(A){console.error("❌ Failed to initialize MNIST Classifier:",A),d.addNotification({message:"Failed to initialize classifier. Check console for details.",type:"error"})}});function u(A){i[A]=!i[A],d.addNotification({message:`${w(A)} panel ${i[A]?"shown":"hidden"}`,type:"info"})}function w(A){return{dataset:"Dataset",visualization:"Visualization",networkConfig:"Network",training:"Training",metrics:"Metrics",apiStatus:"API Status"}[A]||A}function C(A){return{dataset:me,visualization:ge,networkConfig:$e,training:fe,metrics:pe,apiStatus:oe}[A]||oe}function k(){e.reset();const A={...i};Object.keys(i).forEach($=>{i[$]=!1}),setTimeout(()=>{Object.assign(i,A)},100),d.addNotification({message:"MNIST classifier and panel layout have been reset",type:"info"})}function R(){Object.keys(i).forEach(A=>{i[A]=!1}),d.addNotification({message:"All panels hidden",type:"info"})}function T(){Object.keys(i).forEach(A=>{i[A]=!0}),d.addNotification({message:"All panels shown",type:"info"})}async function _(){try{d.addNotification({message:"Setting up quick demo with synthetic MNIST data...",type:"info"}),await e.quickTest(200),i.dataset=!0,i.visualization=!0,i.training=!0,i.metrics=!0,i.apiStatus=!0,d.addNotification({message:"Quick demo ready! You can now start training.",type:"success"})}catch(A){d.addNotification({message:`Failed to setup demo: ${A}`,type:"error"})}}function N(A){e.similarityMetric=A,d.addNotification({message:`Similarity metric changed to ${A}!`,type:"info"})}function P(A){e.activationFunction=A,d.addNotification({message:`Activation function changed to ${A}!`,type:"info"})}async function O(){try{console.log("🔧 Initializing ternary weights..."),await e.initializeTernaryWeights(),d.addNotification({message:"Network initialized with ternary weights (-1, 0, 1)",type:"success"})}catch(A){console.error("❌ Failed to initialize ternary weights:",A),d.addNotification({message:"Failed to initialize ternary weights. Check API connection.",type:"error"})}}async function Q(){try{console.log("⚡ Quantizing weights to ternary..."),await e.quantizeWeightsToTernary(),d.addNotification({message:"Current weights quantized to ternary values",type:"success"})}catch(A){console.error("❌ Failed to quantize weights:",A),d.addNotification({message:"Failed to quantize weights. Check API connection.",type:"error"})}}async function H(){try{console.log("📊 Refreshing ternary stats..."),await e.refreshTernaryStats(),d.addNotification({message:"Ternary weight statistics updated",type:"info"})}catch(A){console.error("❌ Failed to refresh ternary stats:",A),d.addNotification({message:"Could not refresh ternary statistics",type:"warning"})}}return(A,$)=>(b(),M("div",Pd,[gt(We),t("main",Fd,[t("div",Wd,[$[6]||($[6]=t("div",{class:"text-center mb-4"},[t("h1",{class:"text-3xl font-bold text-theme-primary mb-2"},"MNIST Neural Network Classifier"),t("p",{class:"text-sm text-theme-secondary"},"N-dimensional classification with weight visualization")],-1)),t("div",Ld,[t("div",Rd,[gt(Te,{ref_key:"mnistVisualization",ref:n},null,512),c(e).allClasses.length>0?(b(),M("div",Ud,[gt(Ti)])):V("",!0)])]),i.dataset?(b(),Lt(Qt,{key:0,title:"Dataset & Loading",icon:c(me),"initial-position":{x:10,y:10},width:380,height:400,"z-index":150,onClose:$[0]||($[0]=x=>i.dataset=!1),"data-tour":"dataset-panel"},{default:Gt(()=>[t("div",Ed,[gt(ao)])]),_:1},8,["icon"])):V("",!0),i.visualization?(b(),Lt(Qt,{key:1,title:"Weight Visualization",icon:c(ge),"initial-position":{x:400,y:10},width:400,height:500,"z-index":150,onClose:$[1]||($[1]=x=>i.visualization=!1),"data-tour":"visualization-panel"},{default:Gt(()=>[t("div",qd,[gt(Te)])]),_:1},8,["icon"])):V("",!0),i.networkConfig?(b(),Lt(Qt,{key:2,title:"Network Configuration",icon:c($e),"initial-position":{x:810,y:10},width:380,height:450,"z-index":150,onClose:$[2]||($[2]=x=>i.networkConfig=!1),"data-tour":"network-config-panel"},{default:Gt(()=>[t("div",Hd,[gt(Lo,{"similarity-metric":c(e).similarityMetric,"activation-function":c(e).activationFunction,onUpdateSimilarity:N,onUpdateActivation:P,onInitializeTernary:O,onQuantizeWeights:Q,onRefreshStats:H},null,8,["similarity-metric","activation-function"])])]),_:1},8,["icon"])):V("",!0),i.training?(b(),Lt(Qt,{key:3,title:"Training & Optimization",icon:c(fe),"initial-position":{x:10,y:420},width:450,height:400,"z-index":150,onClose:$[3]||($[3]=x=>i.training=!1),"data-tour":"training-panel"},{default:Gt(()=>[t("div",Vd,[gt(zr)])]),_:1},8,["icon"])):V("",!0),i.metrics?(b(),Lt(Qt,{key:4,title:"Metrics & Performance",icon:c(pe),"initial-position":{x:470,y:420},width:400,height:400,"z-index":150,onClose:$[4]||($[4]=x=>i.metrics=!1),"data-tour":"metrics-panel"},{default:Gt(()=>[t("div",Bd,[gt(Pu)])]),_:1},8,["icon"])):V("",!0),i.apiStatus?(b(),Lt(Qt,{key:5,title:"API Status",icon:c(oe),"initial-position":{x:880,y:420},width:400,height:350,"z-index":150,onClose:$[5]||($[5]=x=>i.apiStatus=!1),"data-tour":"api-status-panel"},{default:Gt(()=>[t("div",Od,[gt(Nd)])]),_:1},8,["icon"])):V("",!0),t("div",Gd,[t("div",Qd,[t("div",Jd,[(b(!0),M(_t,null,wt(i,(x,q)=>(b(),M("button",{key:q,onClick:tt=>u(q),class:E(["panel-toggle",{active:x}]),title:`Toggle ${w(q)} panel`,"data-tour":`toggle-${q}`},[(b(),Lt(ye(C(q)),{class:"toggle-icon"})),t("span",jd,l(w(q)),1)],10,Xd))),128))])]),t("div",Kd,[t("div",Yd,[t("button",{onClick:k,class:"layout-btn",title:"Reset Layout"},[gt(c(we),{class:"btn-icon"})]),t("button",{onClick:R,class:"layout-btn",title:"Minimize All"},[gt(c(Le),{class:"btn-icon"})]),t("button",{onClick:T,class:"layout-btn",title:"Show All"},[gt(c(Re),{class:"btn-icon"})]),t("button",{onClick:_,class:"layout-btn demo-btn",title:"Quick Demo"},[gt(c(le),{class:"btn-icon"})])])])])])])]))}});const nv=Et(Zd,[["__scopeId","data-v-37832692"]]);export{nv as default};
